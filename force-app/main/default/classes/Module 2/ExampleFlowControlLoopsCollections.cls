public with sharing class ExampleFlowControlLoopsCollections {
	/**
	 * Compares two numbers and return "Hello World!" x is greater than the y.
	 * If either of the numbers is null or x is less than y, return null.
	 * Example: helloWorld(40, 10) should return "Hello World!"
	 * @param x The first number.
	 * @param y The second number.
	 * @return "Hello World!" if x greater than y, otherwise return null.
	 */
	public static String helloWorld(Integer x, Integer y) {
		return null; // Replace null with the variable you used to store the result
	}

	/**
	 * Checks if a person is tall enough to ride a roller coaster.
	 * A person can ride the roller coaster if they are 48 inches tall or taller.
	 * If the height is less than 48 inches, the method will return false.
	 * Example: canRideRollerCoaster(50) should return true
	 * @param height The height of the person in inches.
	 * @return true if the person is tall enough to ride the roller coaster, false otherwise.
	 */
	public static Boolean canRideRollerCoaster(Integer height) {
		return null; // Replace null with the variable you used to store the result
	}

	/**
	 * Finds the minimum of two numbers.
	 * If both numbers are equal, it returns that number.
	 * Example: findMin(58, 200) should return 58
	 * @param num1 The first number.
	 * @param num2 The second number.
	 * @return The minimum of the two numbers, or null if either number is null.
	 */
	public static Integer findMin(Integer num1, Integer num2) {
		return null; // Replace null with the variable you used to store the result
	}

	/**
	 * Determines the speed class based on the runner's average speed.
	 * Speed Class A if speed is greater than or equal to 20.
	 * Speed Class B if speed is greater than or equal to 15.
	 * Speed Class C if speed is greater than or equal to 10.
	 * Speed Class D if speed is greater than or equal to 5.
	 * Speed Class E otherwise.
	 * Example: determineSpeedClass(17) should return "B"
	 * @param speed The runner's average speed in km/h.
	 * @return The speed class for the given speed.
	 */
	public static String determineSpeedClass(Integer speed) {
		return null; // Replace null with the variable you used to store the result
	}

	/**
	 * Generate a string where the input string is repeated the given number of times, with each
	 * repetition separated by a semicolon.
	 * Do not add a semicolon after the last repetition.
	 * Example: repeatString("Hello World!", 3) should return "Hello World!; Hello World!; Hello World!"
	 * @param inputString The string to be repeated.
	 * @param repeatCount The number of times the string should be repeated.
	 * @return The new string with the inputString repeated repeatCount times.
	 */
	public static String repeatString(String inputString, Integer repeatCount) {
		// Check if the inputString is null or empty, or if repeatCount is less than or equal to 0
		// If so, return an empty string

		// Initialize the result String

		// Use a for loop to append the inputString to the result string repeatCount times
		// If it is not the last iteration, add a semicolon to separate the strings

		return null; // Replace null with the variable you used to store the result
	}

	/**
	 * Create a list filled with even integers up to the input parameter.
	 * Example: createEvenIntegerList(6) should return [2, 4, 6]
	 * @param n The upper bound for the List.
	 * @return A List of even integers from 2 to 'n' (inclusive if 'n' is even).
	 */
	public static List<Integer> createEvenIntegerList(Integer n) {
		return null; // Replace null with the variable you used to store the result
	}

	/**
	 * Iterates over a list of integers and sums only the negative integers.
	 * Example: sumNegativeIntegers() should return -9
	 * @return The sum of negative integers from the list.
	 */
	public static Integer sumNegativeIntegers(List<Integer> numbers) {
		return null; // Replace null with the variable you used to store the result
	}

	/**
	 * Create a map where the keys are the names of employees and the values are their departments.
	 * The method then returns the department of the employee whose name is passed as an argument.
	 * Example: getDepartment("John Doe") should return "Engineering"
	 * @param employeeName The name of the employee.
	 * @return The department of the employee, or null if the employee is not found in the Map.
	 */
	public static String getDepartment(String employeeName) {
		// Initialize a Map

		// Add the following key-value pairs to the Map:
		// 'John Doe' - 'Engineering'
		// 'Jane Smith' - 'Marketing'
		// 'Sam Brown' - 'Human Resources'
		// 'Alice Johnson' - 'Finance'

		// Get the department of the employee

		// Return the department of the employee, or null if the employee is not found in the Map
		return null; // Replace null with the variable you used to store the result
	}
}
