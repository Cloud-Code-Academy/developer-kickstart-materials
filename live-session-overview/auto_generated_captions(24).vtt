WEBVTT

1
00:00:53.265 --> 00:00:53.755
Welcome.

2
00:01:07.415 --> 00:01:10.015
Somebody say something so I can double check that my, uh,

3
00:01:10.065 --> 00:01:12.975
audio setup is actually functional today. No.

4
00:01:13.195 --> 00:01:14.215
Hey, I'm

5
00:01:14.215 --> 00:01:15.215
Here. Thank you.

6
00:01:15.215 --> 00:01:16.735
Okay, perfect. I can hear everybody.

7
00:01:18.165 --> 00:01:18.455
Okay.

8
00:01:27.165 --> 00:01:30.385
We are starting at 7 35 Exactly,

9
00:01:30.385 --> 00:01:32.385
because we got a lot of stuff to get through today.

10
00:02:08.905 --> 00:02:10.765
Oh, I'm not gonna struggle to open this on camera.

11
00:02:10.795 --> 00:02:13.565
That would be embarrassing. Okay. Thank God

12
00:02:36.015 --> 00:02:38.315
my team already played How many senior developers as it take

13
00:02:38.315 --> 00:02:39.395
to screw in a light bulb today?

14
00:02:39.395 --> 00:02:41.475
So I wasn't ready for more embarrassment. Smith.

15
00:02:44.295 --> 00:02:45.855
I was one of the senior developers trying

16
00:02:45.855 --> 00:02:47.655
to screw in the light bulb, just so we're all aware.

17
00:02:48.305 --> 00:02:49.575
Pause the answer. How many?

18
00:02:51.005 --> 00:02:53.975
Three, three and a half.

19
00:02:56.275 --> 00:02:57.695
Two and a half, depending on how you measure it.

20
00:03:02.615 --> 00:03:04.065
Somewhere between two and four.

21
00:03:05.945 --> 00:03:07.605
How do you have half of a developer?

22
00:03:09.625 --> 00:03:13.375
You can find 'em anywhere. They're just waiting to happen.

23
00:03:18.785 --> 00:03:20.515
Sometimes they're on your team

24
00:03:20.535 --> 00:03:23.555
and they're just, you know, you know, they know, you know,

25
00:03:27.805 --> 00:03:28.855
they're, they're develop,

26
00:03:28.855 --> 00:03:30.975
they're developers at the out there waiting to happen.

27
00:03:34.755 --> 00:03:36.535
Any other, any other interesting questions?

28
00:03:40.615 --> 00:03:42.025
Half a developer is a good one.

29
00:03:43.735 --> 00:03:45.345
Sometimes I can show up to work

30
00:03:45.585 --> 00:03:47.185
'cause half a developer, it can happen.

31
00:03:50.305 --> 00:03:52.525
I'd have to show up real disheveled though.

32
00:03:55.595 --> 00:03:56.745
Maybe if you're like late.

33
00:04:01.805 --> 00:04:03.065
I'm like always on time though.

34
00:04:06.895 --> 00:04:08.505
I've never been late to this class. Even

35
00:04:22.025 --> 00:04:24.865
I have like a fantastic track record of showing up

36
00:04:24.865 --> 00:04:26.785
to things like exactly when I need to be there.

37
00:04:40.795 --> 00:04:44.135
All right. Well we are at 7 36, so it is time to start.

38
00:04:47.275 --> 00:04:51.775
Uh oh. We're already recording. Cool. Great. All right.

39
00:04:52.265 --> 00:04:54.295
Today we are welcome everybody.

40
00:04:54.315 --> 00:04:57.615
If you are watching asynchronously, welcome to week five.

41
00:04:58.405 --> 00:05:02.895
Last week we had a guest, very,

42
00:05:03.595 --> 00:05:06.615
uh, smart, very senior engineer come

43
00:05:06.615 --> 00:05:08.575
to teach us about querying.

44
00:05:08.805 --> 00:05:11.415
This week we are going to close the loop on working

45
00:05:11.565 --> 00:05:13.775
with records in Salesforce

46
00:05:14.355 --> 00:05:17.215
or records with Salesforce, your database, um,

47
00:05:17.515 --> 00:05:20.015
by talking about DML

48
00:05:20.315 --> 00:05:22.495
and a little bit more about querying kind of

49
00:05:22.495 --> 00:05:23.575
how the two go together.

50
00:05:24.375 --> 00:05:28.575
'cause they are basically two, uh,

51
00:05:30.275 --> 00:05:31.415
the two critical pieces

52
00:05:31.595 --> 00:05:33.735
of probably the most important thing you can do on

53
00:05:33.735 --> 00:05:37.495
Salesforce, um, which is manipulate the database.

54
00:05:39.825 --> 00:05:43.495
But before that, um, we are supposed

55
00:05:43.495 --> 00:05:47.615
to talk this week some about using LinkedIn as an engineer,

56
00:05:47.945 --> 00:05:50.095
which wow has that changed a lot,

57
00:05:51.255 --> 00:05:55.065
I think in the last probably five or six years.

58
00:05:56.285 --> 00:05:58.885
So I want to to talk a little bit about, um,

59
00:06:00.715 --> 00:06:01.975
my opinion, which again,

60
00:06:01.975 --> 00:06:03.895
everybody's gonna have their own take, uh,

61
00:06:04.355 --> 00:06:06.735
for kinda like what's the utility of LinkedIn,

62
00:06:06.735 --> 00:06:08.055
especially as a job seeker.

63
00:06:08.055 --> 00:06:09.615
That's kind of the angle I take to this.

64
00:06:09.645 --> 00:06:12.295
It's like if you're on LinkedIn, you're there for a reason.

65
00:06:12.995 --> 00:06:16.055
Um, you're not there for to

66
00:06:19.275 --> 00:06:21.275
actually, some people are there just to socialize,

67
00:06:21.335 --> 00:06:25.155
but for the most part, LinkedIn is a tool for, uh,

68
00:06:25.565 --> 00:06:28.625
networking to be quite frank with you.

69
00:06:28.925 --> 00:06:31.385
So I do want to talk a little bit about that, kind of talk

70
00:06:31.385 --> 00:06:35.345
through, um, what I use LinkedIn for when I was starting out

71
00:06:35.645 --> 00:06:37.505
and kind of the way I choose to engage

72
00:06:37.505 --> 00:06:38.665
with people on LinkedIn.

73
00:06:39.245 --> 00:06:42.675
Um, so let's discuss that briefly

74
00:06:42.775 --> 00:06:45.315
and then go to some real, real interesting stuff.

75
00:06:49.255 --> 00:06:52.035
So I have for you right here, my actual LinkedIn today.

76
00:06:52.455 --> 00:06:56.555
Um, LinkedIn, like I said, uh, a lot of people hate it.

77
00:06:57.015 --> 00:06:59.355
Uh, there's a lot of reasons to hate it. I won't lie to you.

78
00:06:59.855 --> 00:07:01.995
Uh, I often do not like LinkedIn.

79
00:07:02.025 --> 00:07:04.035
However, I participate in it

80
00:07:04.035 --> 00:07:08.115
because at the end of the day, it is a net positive for, uh,

81
00:07:09.095 --> 00:07:11.875
me to network with people and me to network myself.

82
00:07:12.975 --> 00:07:15.595
And, uh, it's also a great place to

83
00:07:16.345 --> 00:07:18.155
present yourself in such a way

84
00:07:18.155 --> 00:07:19.675
that the right people will come to you

85
00:07:20.175 --> 00:07:22.515
or you can find the right people to get a job.

86
00:07:23.175 --> 00:07:25.835
So, um, what do I mean by that?

87
00:07:27.135 --> 00:07:29.745
What I mean by that is there's a couple base

88
00:07:29.745 --> 00:07:30.785
things you should probably know about.

89
00:07:31.065 --> 00:07:34.055
LinkedIn. LinkedIn, uh,

90
00:07:34.555 --> 00:07:36.455
you can ba it's basically like you can connect with people,

91
00:07:36.455 --> 00:07:38.015
you make friends, whatever, uh,

92
00:07:38.015 --> 00:07:39.015
but they're not really your friends.

93
00:07:39.405 --> 00:07:41.095
Well, some people are, but not everyone.

94
00:07:41.795 --> 00:07:43.175
The important thing to know is

95
00:07:43.175 --> 00:07:46.295
that when you fill out this profile, this,

96
00:07:46.395 --> 00:07:48.335
it should be like a second resume.

97
00:07:48.835 --> 00:07:52.375
So when I'm talking about a, the importance

98
00:07:52.415 --> 00:07:53.975
of LinkedIn, it's crazy important.

99
00:07:54.155 --> 00:07:57.175
If I'm gonna hire somebody, I look them up on LinkedIn

100
00:07:57.555 --> 00:08:00.695
and if I'm gonna like look something up about somebody,

101
00:08:01.515 --> 00:08:02.655
I'm gonna look at their LinkedIn

102
00:08:02.655 --> 00:08:04.775
because their resume is a PDF document

103
00:08:04.775 --> 00:08:07.175
that gets lost on my computer in a folder somewhere.

104
00:08:07.955 --> 00:08:10.455
I'm not saying that to be like a jerk about it,

105
00:08:10.755 --> 00:08:13.135
but quite frankly, some people are too lazy to,

106
00:08:13.235 --> 00:08:16.855
to actually pick up, uh, and like read through the resume.

107
00:08:17.155 --> 00:08:19.695
Or some people are too lazy to search for you.

108
00:08:19.915 --> 00:08:21.935
You wanna make it really easy for the people

109
00:08:22.325 --> 00:08:25.055
that have the ability, ability to like change your life,

110
00:08:25.055 --> 00:08:27.215
to give you life changing money, to give you a great job,

111
00:08:27.515 --> 00:08:31.055
to find you and to understand who you are.

112
00:08:31.755 --> 00:08:34.935
So this is super important

113
00:08:34.965 --> 00:08:37.815
because it's so easy for me to find anybody

114
00:08:38.335 --> 00:08:39.335
I can find up here

115
00:08:39.675 --> 00:08:41.335
and find exactly who I'm looking for,

116
00:08:42.375 --> 00:08:43.535
probably without much effort at all.

117
00:08:44.275 --> 00:08:46.375
So this is crazy, crazy important.

118
00:08:46.395 --> 00:08:49.695
If you are a job seeker, please spend time on your LinkedIn.

119
00:08:49.835 --> 00:08:51.575
And I'm not saying you have to do it all at once,

120
00:08:51.835 --> 00:08:53.255
it can be like a gradual thing.

121
00:08:53.855 --> 00:08:55.135
I wish I had screenshots

122
00:08:55.205 --> 00:08:57.445
of my LinkedIn when I started out compared to today,

123
00:08:57.945 --> 00:09:02.245
but it's very, very easy, um, to get complacent about it

124
00:09:02.245 --> 00:09:03.405
because LinkedIn, a lot

125
00:09:03.405 --> 00:09:06.245
of people find it very like toxic and very fake.

126
00:09:06.945 --> 00:09:09.085
And uh, like some people don't like social media.

127
00:09:09.285 --> 00:09:10.405
I also don't like social media.

128
00:09:10.645 --> 00:09:12.165
I only have two pieces of social media.

129
00:09:12.285 --> 00:09:14.965
I have LinkedIn and I have Instagram.

130
00:09:15.585 --> 00:09:18.125
And um, you know,

131
00:09:18.475 --> 00:09:20.885
I've seen 'em a lot both change a lot over the last

132
00:09:22.245 --> 00:09:24.035
probably five, six years.

133
00:09:24.735 --> 00:09:27.075
But so what, what do you actually do on here?

134
00:09:27.215 --> 00:09:32.165
So LinkedIn is your place to kind of, um, put a good picture

135
00:09:32.165 --> 00:09:35.165
of yourself up, tell people what you're about very quickly.

136
00:09:36.705 --> 00:09:38.205
And then if for someone

137
00:09:38.265 --> 00:09:40.045
who is interested in learning more about you,

138
00:09:40.045 --> 00:09:41.925
they will go through and read this stuff.

139
00:09:42.705 --> 00:09:45.125
The person, a person browsing, like, uh,

140
00:09:45.795 --> 00:09:47.845
your resume may only spend anywhere from five

141
00:09:47.865 --> 00:09:49.645
to 10 seconds actually reading the resume.

142
00:09:50.145 --> 00:09:52.445
But I find that people do spend more time.

143
00:09:52.645 --> 00:09:56.165
I find that me as a person who, um, has hired people,

144
00:09:56.475 --> 00:09:58.605
will spend more time looking at their

145
00:09:58.845 --> 00:10:00.045
LinkedIn than their resume.

146
00:10:01.825 --> 00:10:04.025
'cause LinkedIn lets you see like, oh, what kind

147
00:10:04.025 --> 00:10:05.465
of comments is this person posting?

148
00:10:05.975 --> 00:10:08.985
What kind of, um, things are they resharing?

149
00:10:09.295 --> 00:10:10.865
What kinds of posts are they making?

150
00:10:10.865 --> 00:10:12.425
Like what is this person talking about?

151
00:10:12.615 --> 00:10:14.665
Because that can tell you a lot about them.

152
00:10:14.735 --> 00:10:17.025
Like, if I were to look at me from an outside perspective,

153
00:10:17.125 --> 00:10:19.465
I'd be like, oh, he's gone to TDX.

154
00:10:19.525 --> 00:10:21.625
He must be, he must think he's a big deal,

155
00:10:21.885 --> 00:10:23.905
or maybe he actually is a big deal, you know,

156
00:10:23.925 --> 00:10:25.265
or maybe his work's making him go.

157
00:10:25.765 --> 00:10:28.465
Who knows? Um, oh, okay, he's

158
00:10:29.505 --> 00:10:31.305
reposting this guy's post.

159
00:10:32.085 --> 00:10:34.865
What's that about? Oh, certifications.

160
00:10:35.045 --> 00:10:36.505
He is thinking about certifications.

161
00:10:37.005 --> 00:10:38.185
You can kind of get a good picture.

162
00:10:38.405 --> 00:10:42.025
Oh, he's reposting this guy's, uh, commerce Cloud job.

163
00:10:42.275 --> 00:10:43.825
Maybe he knows about Commerce Cloud.

164
00:10:44.645 --> 00:10:47.705
Um, you know, you can, you can see kind of like

165
00:10:47.705 --> 00:10:51.255
what someone is about a lot easier.

166
00:10:51.635 --> 00:10:54.775
And so I, I'm not saying this works for every hiring person,

167
00:10:54.915 --> 00:10:56.655
but just doing a little bit

168
00:10:56.655 --> 00:11:00.295
of participation at LinkedIn can actually pay off a lot.

169
00:11:00.915 --> 00:11:03.695
Um, when we're looking at your job history, right?

170
00:11:04.415 --> 00:11:08.655
I used to be ashamed of my job history, um, until,

171
00:11:09.235 --> 00:11:11.695
you know, I, I hated the fact that I, I used

172
00:11:11.695 --> 00:11:12.815
to call them dirty jobs

173
00:11:13.155 --> 00:11:15.735
and I I, I really used to internalize them this way.

174
00:11:16.045 --> 00:11:19.375
Like, if you go way, way, way back, I was very upset to have

175
00:11:19.895 --> 00:11:20.935
Starbucks on my resume.

176
00:11:21.495 --> 00:11:23.655
I was very upset to have Cheesecake Factory.

177
00:11:23.775 --> 00:11:25.135
I was very upset to have a

178
00:11:25.135 --> 00:11:26.735
Mexican restaurant in my hometown.

179
00:11:27.235 --> 00:11:30.935
But the, the thing with these jobs that were like very,

180
00:11:31.155 --> 00:11:33.655
you know, it's hard to pull something good outta them is

181
00:11:33.655 --> 00:11:35.615
that they actually, the people I've hired

182
00:11:35.615 --> 00:11:36.975
that have worked these types of jobs

183
00:11:37.435 --> 00:11:39.135
and the people I work with that have worked these types

184
00:11:39.135 --> 00:11:41.455
of jobs, absolutely so much better to work

185
00:11:41.455 --> 00:11:42.615
with than the people that haven't worked them.

186
00:11:43.215 --> 00:11:44.695
I would, that's my personal opinion.

187
00:11:44.915 --> 00:11:48.435
So this was all leading me to say this, like

188
00:11:48.785 --> 00:11:50.515
however you want to present yourself.

189
00:11:51.055 --> 00:11:52.515
Uh, I think authenticity

190
00:11:52.535 --> 00:11:55.805
and honesty is a great way to lead, especially in 2025

191
00:11:56.195 --> 00:11:57.485
because you know,

192
00:11:57.745 --> 00:12:00.805
if I'm looking at my weird job history here that I have,

193
00:12:01.285 --> 00:12:03.005
I have a lot to talk about and I have a lot of things

194
00:12:03.005 --> 00:12:04.365
that can connect to a lot of different people

195
00:12:04.365 --> 00:12:05.525
with a lot of different experiences.

196
00:12:06.385 --> 00:12:10.925
If you work the same job like, uh, for 10 years

197
00:12:11.145 --> 00:12:12.845
and then you are now doing this,

198
00:12:14.155 --> 00:12:16.095
all the different experiences you had at your job,

199
00:12:16.155 --> 00:12:17.855
you probably just need to sit down and unpack them

200
00:12:17.855 --> 00:12:19.575
and find a way to express them on here.

201
00:12:20.045 --> 00:12:23.535
Because I'm sure you've seen a lot of interesting things.

202
00:12:23.885 --> 00:12:27.055
Even if it was a very simple like, you know,

203
00:12:27.455 --> 00:12:30.015
straightforward job, like Starbucks is not a complicated

204
00:12:30.075 --> 00:12:33.355
job, but you've seen a lot of interesting stuff

205
00:12:33.375 --> 00:12:34.795
and it gives you something to connect

206
00:12:34.795 --> 00:12:36.475
with people about just putting it on there.

207
00:12:37.375 --> 00:12:41.155
Um, this is me saying please spend time on your LinkedIn.

208
00:12:41.395 --> 00:12:43.315
'cause people do look at it. People do care.

209
00:12:43.375 --> 00:12:46.795
If you're gonna go look for your first, um, engineering job,

210
00:12:46.795 --> 00:12:47.955
your first developer job,

211
00:12:48.055 --> 00:12:51.275
or a hybrid Salesforce job where you're doing a little bit

212
00:12:51.275 --> 00:12:52.915
of admin, a little bit of consulting, a little bit

213
00:12:52.915 --> 00:12:55.955
of development, do put your experiences on there

214
00:12:55.955 --> 00:12:57.595
because those can help you also connect

215
00:12:57.595 --> 00:12:59.155
with like lots of different industries.

216
00:12:59.465 --> 00:13:03.825
Like when I worked, uh, in consulting, being aware of,

217
00:13:04.565 --> 00:13:06.545
um, a lot of the things that I ran into working

218
00:13:06.545 --> 00:13:09.385
as a bank teller was actually super

219
00:13:09.385 --> 00:13:11.265
helpful at my current job.

220
00:13:11.545 --> 00:13:15.385
I cannot explain to you how crazy useful it is

221
00:13:15.405 --> 00:13:17.745
to have just worked as a teller for like a month.

222
00:13:18.185 --> 00:13:19.745
E even a month would've given me.

223
00:13:20.045 --> 00:13:21.465
And I worked there for almost three years.

224
00:13:21.685 --> 00:13:24.935
So don't be afraid of your past, you know,

225
00:13:25.285 --> 00:13:26.575
like really put it out there.

226
00:13:28.435 --> 00:13:29.605
Last thing on your LinkedIn

227
00:13:29.605 --> 00:13:30.965
to pay attention to as an engineer.

228
00:13:31.575 --> 00:13:33.445
These, these are gold.

229
00:13:33.755 --> 00:13:36.365
There's a lot of drama over the last,

230
00:13:36.685 --> 00:13:38.165
I would say month about certifications,

231
00:13:38.165 --> 00:13:40.965
especially the AI ones maybe even six months ago too.

232
00:13:40.985 --> 00:13:43.565
But here's, these are the gold

233
00:13:43.845 --> 00:13:45.245
standards certifications right here.

234
00:13:45.845 --> 00:13:48.005
Platform developer one and a certified administrator.

235
00:13:48.665 --> 00:13:50.925
If you got these recruiters are going

236
00:13:50.925 --> 00:13:52.405
to take you more seriously.

237
00:13:52.715 --> 00:13:55.125
Whether or not you actually know what you're talking about,

238
00:13:55.515 --> 00:13:57.525
just having these is a huge deal.

239
00:13:57.985 --> 00:13:59.405
So if you have them,

240
00:13:59.705 --> 00:14:02.685
put them on your LinkedIn, by all means do it.

241
00:14:03.065 --> 00:14:05.725
We will do another quick LinkedIn overview about like how

242
00:14:05.725 --> 00:14:07.125
to use this to apply for jobs

243
00:14:07.185 --> 00:14:10.645
and how to kind of network on here.

244
00:14:11.025 --> 00:14:13.845
But the first step to networking on LinkedIn is

245
00:14:13.845 --> 00:14:16.005
to define yourself as best as you can

246
00:14:16.065 --> 00:14:17.365
and as honestly as you can.

247
00:14:18.025 --> 00:14:19.685
Um, that's my LinkedIn spiel.

248
00:14:20.195 --> 00:14:21.925
Does anybody have any questions about LinkedIn?

249
00:14:24.725 --> 00:14:28.225
That's step one. And obviously this is just my opinion.

250
00:14:28.225 --> 00:14:30.145
There are gonna be all sorts of gurus out there

251
00:14:30.145 --> 00:14:32.025
that probably know better than me or different than me.

252
00:14:33.785 --> 00:14:36.045
But from day one, what has worked is

253
00:14:36.715 --> 00:14:40.485
advertise myself honestly, interact with people genuinely.

254
00:14:40.905 --> 00:14:42.605
Um, you know,

255
00:14:43.665 --> 00:14:45.645
AI posting is probably not gonna get you very far,

256
00:14:48.065 --> 00:14:50.885
but using it, reading it, interacting on it

257
00:14:51.695 --> 00:14:52.925
helps people find you easier.

258
00:15:00.335 --> 00:15:02.415
Questions, comments before we move on to code?

259
00:15:02.715 --> 00:15:03.735
Oh, I gotta check the chat.

260
00:15:05.575 --> 00:15:07.575
LinkedIn is how I found Warren and Cloud Code Academy.

261
00:15:07.795 --> 00:15:10.215
See, we're out here, uh, on LinkedIn

262
00:15:10.215 --> 00:15:15.055
and it helps us, uh, get people into the program.

263
00:15:15.835 --> 00:15:16.835
So

264
00:15:18.195 --> 00:15:19.515
I just wanna say thank you for that

265
00:15:19.515 --> 00:15:23.355
because like, I also struggle with having those

266
00:15:24.365 --> 00:15:26.315
dirty jobs on my resume.

267
00:15:26.745 --> 00:15:30.795
Yeah, like you said, if you don't have 'em,

268
00:15:30.855 --> 00:15:34.345
you don't really get the same quality people.

269
00:15:35.755 --> 00:15:36.955
I, I mean that's my opinion.

270
00:15:37.255 --> 00:15:39.795
Um, I, I used to really hate putting them on my resume,

271
00:15:40.055 --> 00:15:44.115
but I I, on the flip side of my resume, I still have like,

272
00:15:45.175 --> 00:15:46.515
you know, my Starbucks job.

273
00:15:47.195 --> 00:15:49.275
I still have my, my front page

274
00:15:49.275 --> 00:15:50.755
of my resume is development experience.

275
00:15:51.895 --> 00:15:55.955
Um, but, but it is not like Mike Row dirty jobs either.

276
00:15:56.395 --> 00:15:57.995
I just think of it like that. 'cause when you leave the

277
00:15:57.995 --> 00:15:59.475
Cheesecake Factory after a 12 hour

278
00:15:59.485 --> 00:16:02.555
shift, you're just kind of dirty.

279
00:16:03.465 --> 00:16:05.355
Like, like you just got like, like, you know,

280
00:16:05.355 --> 00:16:06.955
like fry grease or whatever on you.

281
00:16:07.295 --> 00:16:08.795
So, and, and

282
00:16:09.465 --> 00:16:10.715
Been there, done that. Yeah.

283
00:16:11.345 --> 00:16:12.635
Yeah. I mean, I, I don't know.

284
00:16:12.635 --> 00:16:14.235
I used to think of it like that 'cause I really wanted,

285
00:16:14.395 --> 00:16:15.955
I was really tired of working those jobs,

286
00:16:16.175 --> 00:16:19.995
but, um, I I, I'm very happy that I did.

287
00:16:21.135 --> 00:16:24.475
And you know what, like some of my best friends, uh,

288
00:16:24.475 --> 00:16:25.515
still work those kind of jobs

289
00:16:25.655 --> 00:16:27.075
and I, I don't think of them like that.

290
00:16:27.375 --> 00:16:29.195
It just felt that way in my heart

291
00:16:29.195 --> 00:16:33.715
because of, like when I, when I was trying to just get jobs

292
00:16:33.735 --> 00:16:35.355
before I had programming skills,

293
00:16:35.695 --> 00:16:37.355
it felt like I would get rejected

294
00:16:37.385 --> 00:16:38.715
because I had no like,

295
00:16:38.985 --> 00:16:40.835
corporate experience or anything, you know?

296
00:16:41.495 --> 00:16:45.245
So I wouldn't be afraid to put it out there, especially

297
00:16:45.245 --> 00:16:46.405
for a Salesforce ecosystem.

298
00:16:46.745 --> 00:16:51.285
Uh, even though the job market is like, you know, not

299
00:16:51.285 --> 00:16:54.725
what it used to be for Salesforce far

300
00:16:54.725 --> 00:16:57.685
and away, they're very open to, uh,

301
00:16:59.215 --> 00:17:01.295
non-standard backgrounds, I would say.

302
00:17:01.395 --> 00:17:03.215
Or, you know, not straight outta college

303
00:17:03.565 --> 00:17:04.775
into the whatever backgrounds.

304
00:17:06.795 --> 00:17:08.195
I mean, there's a lot of, you know, like,

305
00:17:08.475 --> 00:17:10.235
nonsense on here like this, but you just don't,

306
00:17:10.235 --> 00:17:11.355
you know, you don't gotta read it.

307
00:17:12.425 --> 00:17:14.485
You know, you can just be like, I don't care about that.

308
00:17:15.665 --> 00:17:20.315
So There is good stuff on here, it's just what you curate.

309
00:17:20.935 --> 00:17:22.755
And I have a lot of garbage on my screen today,

310
00:17:22.755 --> 00:17:24.315
so I'm not really sure what that's about.

311
00:17:26.365 --> 00:17:28.265
Anyway, that's all about LinkedIn.

312
00:17:28.365 --> 00:17:29.625
That's my actual LinkedIn.

313
00:17:29.775 --> 00:17:32.585
I'll, I'll do another walkthrough, uh, of LinkedIn.

314
00:17:33.025 --> 00:17:37.745
I think it's next week, um, where we'll talk about, um,

315
00:17:40.655 --> 00:17:43.555
uh, like how to actually like, apply for jobs.

316
00:17:43.585 --> 00:17:46.195
Like what is, how would I apply to a job today?

317
00:17:46.815 --> 00:17:48.875
Um, and how did I used to apply to jobs?

318
00:17:48.965 --> 00:17:50.445
Jobs when I, especially when I was looking

319
00:17:50.445 --> 00:17:53.005
for like my second job or my third job.

320
00:17:54.735 --> 00:17:57.275
So we'll get into that at that point.

321
00:17:57.815 --> 00:17:59.595
But LinkedIn, you might hate it,

322
00:17:59.595 --> 00:18:01.355
but it is a very, very useful tool.

323
00:18:06.335 --> 00:18:07.785
Your resume is still super important,

324
00:18:07.885 --> 00:18:10.485
but LinkedIn is probably the second.

325
00:18:11.915 --> 00:18:16.285
Alright, let's talk about something more fun, which is,

326
00:18:16.705 --> 00:18:18.965
uh, computer programming.

327
00:18:19.825 --> 00:18:22.605
So we learned last week about this.

328
00:18:22.945 --> 00:18:27.775
We know how to query records, uh,

329
00:18:27.845 --> 00:18:29.215
from our database.

330
00:18:29.635 --> 00:18:30.935
So I can do this

331
00:18:35.895 --> 00:18:38.315
and I can get records outta my database, right?

332
00:18:38.735 --> 00:18:41.635
We all know how this works at this point,

333
00:18:41.945 --> 00:18:43.155
hopefully from last week.

334
00:18:43.295 --> 00:18:47.825
And we also know that we can, from our homework, do this.

335
00:18:47.965 --> 00:18:52.925
We can say, I would like

336
00:18:52.925 --> 00:18:57.305
to create a new record.

337
00:19:04.605 --> 00:19:05.905
Um, let's see.

338
00:19:06.085 --> 00:19:07.225
Oh, well we saw,

339
00:19:07.325 --> 00:19:08.865
I'm just taking the first person I see off

340
00:19:08.865 --> 00:19:10.225
the list of students.

341
00:19:10.645 --> 00:19:10.865
So,

342
00:19:19.195 --> 00:19:20.815
All right, so we know that we can do this.

343
00:19:21.115 --> 00:19:22.455
We know that we can create a record.

344
00:19:22.715 --> 00:19:25.135
We can, again, if we break this down just

345
00:19:25.135 --> 00:19:28.575
with our programming fundamental knowledge data type,

346
00:19:28.915 --> 00:19:30.335
what's the variable gonna be called

347
00:19:30.535 --> 00:19:32.455
for us human beings who are reading the code?

348
00:19:32.995 --> 00:19:37.455
Uh, assignment operator. I wanna make a new instance of it.

349
00:19:38.005 --> 00:19:40.655
Constructor records have constructors

350
00:19:40.955 --> 00:19:44.615
and records have a special constructor format, which, uh,

351
00:19:45.115 --> 00:19:46.255
we should probably be aware of

352
00:19:46.425 --> 00:19:49.615
where we can either use the default constructor,

353
00:19:49.615 --> 00:19:52.055
which looks like this and that'll create it.

354
00:19:52.635 --> 00:19:55.765
And then we can say, you know,

355
00:19:56.305 --> 00:19:57.805
assign some property of it.

356
00:20:00.185 --> 00:20:01.205
We can do it like this

357
00:20:01.935 --> 00:20:04.565
where I can assign implicitly the property,

358
00:20:05.765 --> 00:20:08.945
or sorry, assign explicitly the property of my meal,

359
00:20:09.435 --> 00:20:11.945
which is a record that I'm gonna insert into my database

360
00:20:12.485 --> 00:20:14.475
or records.

361
00:20:14.585 --> 00:20:17.395
Have a special constructor. It's very, very special.

362
00:20:17.495 --> 00:20:19.875
You can't make constructors like this in Apex except

363
00:20:19.875 --> 00:20:21.475
unless they're, or unless they're records.

364
00:20:22.295 --> 00:20:26.715
So with that, I can name the property in my constructor

365
00:20:27.175 --> 00:20:29.835
and assign it a value.

366
00:20:36.565 --> 00:20:40.935
So I can either put properties of my,

367
00:20:42.155 --> 00:20:44.335
my, or really fields, I guess you could call them.

368
00:20:44.535 --> 00:20:47.405
'cause they are fields. Now I could put fields of my,

369
00:20:47.465 --> 00:20:49.405
in my constructor and assign them,

370
00:20:49.745 --> 00:20:52.185
and I can do that for any field.

371
00:20:54.345 --> 00:20:56.685
So I could do more, I could put a comma

372
00:20:57.065 --> 00:20:59.045
and then I could assign some other attribute of it.

373
00:20:59.185 --> 00:21:00.405
Uh, I don't know if I actually

374
00:21:00.405 --> 00:21:01.605
have anything else to find on this.

375
00:21:04.265 --> 00:21:04.385
I,

376
00:21:12.845 --> 00:21:16.095
mark says, if you leave the record constructor blank

377
00:21:16.275 --> 00:21:18.055
and do not define the name below it.

378
00:21:18.425 --> 00:21:21.375
Would the default name of the field of the object kick in

379
00:21:21.375 --> 00:21:22.735
and assign a record name automatically,

380
00:21:22.735 --> 00:21:24.455
like if it's an auto number, et cetera.

381
00:21:24.795 --> 00:21:26.015
It depends on how you, yes,

382
00:21:26.035 --> 00:21:27.215
but yes, if it's an auto number,

383
00:21:27.245 --> 00:21:28.535
it's gonna assign the auto number.

384
00:21:29.035 --> 00:21:30.975
Um, you actually can't control

385
00:21:31.515 --> 00:21:33.135
the name if it's an auto number.

386
00:21:33.515 --> 00:21:35.535
Uh, but if you don't name it anything,

387
00:21:35.755 --> 00:21:37.775
I'm pretty sure it ends up as the record id.

388
00:21:40.515 --> 00:21:42.575
I'm gonna make another custom field on this here.

389
00:21:42.755 --> 00:21:45.455
So I made some objects for today just for, for the,

390
00:21:46.015 --> 00:21:48.855
a few minutes before class for, for laughs um,

391
00:21:50.955 --> 00:21:53.085
made burger side and meal just

392
00:21:53.085 --> 00:21:57.565
because, uh, we've been really enjoying grilling lately.

393
00:21:58.265 --> 00:22:01.795
So I'm gonna make a new field on this.

394
00:22:01.845 --> 00:22:05.235
We'll just do, just do a number here.

395
00:22:10.345 --> 00:22:15.315
Just call it a number. I'm gonna actually

396
00:22:15.315 --> 00:22:17.075
call the field, uh, combo.

397
00:22:19.535 --> 00:22:22.165
We'll allow, allow it to be two digits long.

398
00:22:22.405 --> 00:22:23.645
'cause that would be way more crazy

399
00:22:23.745 --> 00:22:24.965
if there was a three digit combo.

400
00:22:26.535 --> 00:22:28.415
Actually, we'll do a three digit combo. 'cause that's funny.

401
00:22:29.745 --> 00:22:30.685
No decimal places.

402
00:22:36.305 --> 00:22:37.955
Then always require a value.

403
00:22:42.965 --> 00:22:44.985
And then we're gonna leave it like this for now.

404
00:22:48.965 --> 00:22:52.505
And because the value is required, it's automatically, uh,

405
00:22:52.505 --> 00:22:53.465
visible to everybody

406
00:22:57.265 --> 00:22:58.045
and we'll do safe.

407
00:22:58.515 --> 00:23:01.985
Okay? Oh, we got somebody in the waiting room.

408
00:23:02.075 --> 00:23:03.985
Sorry about that. All right, so

409
00:23:04.525 --> 00:23:06.105
now I could also assign this,

410
00:23:06.685 --> 00:23:08.265
or wait, I called it combo, right?

411
00:23:10.775 --> 00:23:12.835
And I would give this a number value, like one,

412
00:23:13.055 --> 00:23:14.835
so you can do your constructor like this.

413
00:23:15.395 --> 00:23:16.995
I can go down here and do it like this.

414
00:23:20.225 --> 00:23:21.525
We all know all this stuff,

415
00:23:26.795 --> 00:23:27.085
okay?

416
00:23:27.395 --> 00:23:29.445
What we want to talk about today is, uh,

417
00:23:29.585 --> 00:23:31.125
how do we combine queries

418
00:23:31.145 --> 00:23:34.485
and how do we combine, uh, DML operations

419
00:23:35.825 --> 00:23:40.015
in order to actually, um,

420
00:23:41.705 --> 00:23:44.475
work, like do the full life cycle of working with records

421
00:23:44.535 --> 00:23:46.165
and Salesforce, because this,

422
00:23:46.755 --> 00:23:50.445
this fundamental like query records, create records,

423
00:23:50.705 --> 00:23:53.325
update records, relate records, is basically

424
00:23:53.325 --> 00:23:54.725
what this whole thing is all about.

425
00:23:55.265 --> 00:23:58.405
And since we know, uh, at a fundamental level

426
00:23:58.635 --> 00:24:01.285
that records are just objects,

427
00:24:01.865 --> 00:24:03.885
we should not be afraid of working with them.

428
00:24:04.145 --> 00:24:05.325
We should not be afraid

429
00:24:05.545 --> 00:24:07.285
of putting them into different collections,

430
00:24:07.315 --> 00:24:08.805
putting them into maps

431
00:24:08.985 --> 00:24:13.485
and understanding that the fields of our records are just

432
00:24:14.685 --> 00:24:17.085
variables or member variables of an object.

433
00:24:20.225 --> 00:24:20.925
Oh, did I,

434
00:24:26.885 --> 00:24:27.175
okay.

435
00:24:32.205 --> 00:24:33.025
Am I crazy?

436
00:24:42.695 --> 00:24:43.315
Am I like

437
00:24:47.045 --> 00:24:47.755
crazy guys?

438
00:24:48.435 --> 00:24:51.055
You have an extra quotation at the end of the,

439
00:24:51.645 --> 00:24:52.695
Yeah, there it is.

440
00:24:55.605 --> 00:24:58.785
And you gotta go back. Oh, oh my gosh. Wow. Whew.

441
00:24:59.975 --> 00:25:01.535
I told you today it took, uh,

442
00:25:01.585 --> 00:25:03.615
three senior developers to screw a light bulb.

443
00:25:03.635 --> 00:25:05.535
So that's really gonna set the tone for today.

444
00:25:06.115 --> 00:25:07.535
So, we'll, we'll test everyone's,

445
00:25:07.535 --> 00:25:09.135
we're just testing your guys debugging skills.

446
00:25:09.485 --> 00:25:14.315
Alright, um, so I just inserted a record right here

447
00:25:14.735 --> 00:25:16.475
as we've done on, uh, homework for,

448
00:25:17.655 --> 00:25:19.495
I have a custom record called Meal.

449
00:25:20.045 --> 00:25:22.255
Meal has a name and it has a combo on it.

450
00:25:22.875 --> 00:25:24.335
Uh, that's all it has right now.

451
00:25:24.475 --> 00:25:27.775
So I just inserted it and then I can query it down here.

452
00:25:28.555 --> 00:25:30.735
So when we're querying something, uh,

453
00:25:31.045 --> 00:25:34.335
currently I'm just selecting every single meal in the

454
00:25:34.335 --> 00:25:35.855
system that's ever been ordered.

455
00:25:35.955 --> 00:25:37.615
So I'm getting, uh,

456
00:25:37.885 --> 00:25:40.655
Haley's meal right now, probably in my list.

457
00:25:40.715 --> 00:25:42.975
And if I were to take a look at my list,

458
00:25:46.935 --> 00:25:51.245
we're gonna write a for loop with our list of meal.

459
00:25:51.665 --> 00:25:55.415
I'm just call it m for meals, m in meal.

460
00:25:58.165 --> 00:26:00.885
ISVS code misbehaving so bad today. All right?

461
00:26:01.845 --> 00:26:06.675
I'll just, uh, just print

462
00:26:06.675 --> 00:26:07.835
out what the meal looks like

463
00:26:08.495 --> 00:26:12.875
and I'm gonna do my little trick that I like to do so

464
00:26:12.875 --> 00:26:15.075
that I can read it very easily in my debug log.

465
00:26:16.395 --> 00:26:19.155
I have a question. I know that like it's a list,

466
00:26:19.375 --> 00:26:21.235
but how do you know that it's a list?

467
00:26:22.695 --> 00:26:23.695
So Find It. That's

468
00:26:23.695 --> 00:26:24.395
a great question.

469
00:26:24.395 --> 00:26:27.105
You talking about this right here?

470
00:26:27.205 --> 00:26:28.345
How do I know this is a list?

471
00:26:29.055 --> 00:26:32.585
Yeah, because above it we didn't,

472
00:26:33.295 --> 00:26:34.425
It's only one record, right?

473
00:26:34.815 --> 00:26:37.505
Yeah. Mm-hmm. So how do I know?

474
00:26:37.655 --> 00:26:39.865
Well, the truth is, I don't know.

475
00:26:40.405 --> 00:26:42.065
So what, what happens here?

476
00:26:43.265 --> 00:26:46.285
And uh, I'll go back over this again.

477
00:26:46.515 --> 00:26:48.445
What happens here is I don't know.

478
00:26:48.705 --> 00:26:53.205
So if I look at my debug output right here, I can see

479
00:26:53.205 --> 00:26:56.515
that now I have two meals, right?

480
00:26:58.055 --> 00:27:00.315
But I don't know how many I'm gonna get back from this

481
00:27:00.615 --> 00:27:01.755
and you, that's correct.

482
00:27:01.985 --> 00:27:03.715
However, when we run a query,

483
00:27:04.685 --> 00:27:08.825
the query always returns a list of records

484
00:27:09.365 --> 00:27:10.785
of a specific type.

485
00:27:11.405 --> 00:27:13.385
It always does no matter what.

486
00:27:13.795 --> 00:27:17.225
There are times where you will see this code

487
00:27:19.605 --> 00:27:24.265
meal, specific meal, and you'll have it looking like this.

488
00:27:24.445 --> 00:27:27.795
Select ID from meal

489
00:27:29.525 --> 00:27:31.435
limit one or something like this.

490
00:27:32.105 --> 00:27:36.995
This means that my query is only allowed to retrieve a list

491
00:27:36.995 --> 00:27:38.595
of records that is one long.

492
00:27:40.375 --> 00:27:42.075
So Salesforce has a,

493
00:27:42.135 --> 00:27:45.195
or Apex, really Apex has a shortcut built into it.

494
00:27:45.505 --> 00:27:48.875
That shortcut is if there is a list of records

495
00:27:49.615 --> 00:27:53.395
and it is of size exactly one, not zero

496
00:27:53.855 --> 00:27:56.395
and not more than one, you are allowed to store it

497
00:27:56.395 --> 00:27:57.795
to a single variable.

498
00:27:59.095 --> 00:28:02.475
That is how I know in this case,

499
00:28:02.475 --> 00:28:03.955
that I'm going to get one back.

500
00:28:06.115 --> 00:28:08.635
I can do this because I know I will get one back.

501
00:28:08.945 --> 00:28:12.395
However, if I get zero back, this code actually fails.

502
00:28:13.155 --> 00:28:15.835
I have another record in my system that's called Side

503
00:28:16.385 --> 00:28:17.675
that comes with my meal

504
00:28:18.135 --> 00:28:19.795
and I haven't created any of those yet.

505
00:28:21.825 --> 00:28:24.445
So if I query up like this, if I query my side,

506
00:28:24.865 --> 00:28:25.925
I'm gonna get an exception.

507
00:28:26.175 --> 00:28:30.445
Watch this illegal assignment from list

508
00:28:30.505 --> 00:28:32.245
of side to single meal.

509
00:28:33.105 --> 00:28:37.525
Oh wait, sorry, that wasn't the exception I wanted.

510
00:28:38.425 --> 00:28:40.055
There we go. That's the exception I wanted.

511
00:28:40.365 --> 00:28:43.175
List has no rows for assignment to s object.

512
00:28:44.565 --> 00:28:46.295
This always returns a list.

513
00:28:46.435 --> 00:28:48.255
You always need to be thinking in your mind

514
00:28:48.285 --> 00:28:49.775
like, I'm gonna get a list back.

515
00:28:50.375 --> 00:28:51.775
I don't know how many I'm gonna get back.

516
00:28:52.575 --> 00:28:54.705
Because even if I say limit one,

517
00:28:55.245 --> 00:28:58.945
if there's none in the system, I'm gonna get none.

518
00:28:59.365 --> 00:29:00.985
And zero records.

519
00:29:01.545 --> 00:29:04.065
A list of size zero cannot assign into this.

520
00:29:04.455 --> 00:29:05.825
This is a shortcut that they give you,

521
00:29:05.825 --> 00:29:07.225
but it's a very dangerous shortcut.

522
00:29:08.145 --> 00:29:10.185
I do not, I would not encourage you to use this

523
00:29:10.205 --> 00:29:13.105
unless you are very sure that you're going

524
00:29:13.105 --> 00:29:14.825
to get a specific record back.

525
00:29:16.335 --> 00:29:19.315
Gotcha. Uh, blanche says,

526
00:29:19.495 --> 00:29:21.115
so you should do a null check.

527
00:29:21.115 --> 00:29:23.595
If you're not sure. Noel is actually not going

528
00:29:23.595 --> 00:29:26.705
to help me here because check this out.

529
00:29:27.165 --> 00:29:29.985
You, like I said, you always get a list back.

530
00:29:30.045 --> 00:29:31.905
You always get a list of records back.

531
00:29:32.385 --> 00:29:34.145
I don't have any sides in my system yet.

532
00:29:34.305 --> 00:29:36.105
I promise you I have not inserted any.

533
00:29:36.605 --> 00:29:40.305
So if I run this query, even with a limit one watch,

534
00:29:40.475 --> 00:29:42.525
let's look at the value of what my specific

535
00:29:42.705 --> 00:29:44.805
or my, uh, all sides,

536
00:29:45.545 --> 00:29:49.155
my all sides variable ends up being just,

537
00:29:49.205 --> 00:29:50.595
let's take a look at it real quick.

538
00:29:51.795 --> 00:29:55.345
Uh, wow.

539
00:29:55.485 --> 00:29:57.825
Is my keyboard in a different language mode right now?

540
00:29:58.125 --> 00:30:00.185
It is. That is why everything is behaving so odd.

541
00:30:00.885 --> 00:30:04.285
My bad guys, I just fixed that off screen.

542
00:30:04.425 --> 00:30:05.765
So we should be back to normal Now.

543
00:30:06.085 --> 00:30:07.805
I was like, man, this feels really weird today.

544
00:30:08.905 --> 00:30:12.525
Uh, so I'm gonna debug out my list, which is gonna spit out

545
00:30:13.415 --> 00:30:15.885
every side of my system that I can find up to one.

546
00:30:17.925 --> 00:30:22.835
Actually, we'll do 'em all. Let's

547
00:30:22.835 --> 00:30:24.835
take a look at what the debug output is for this.

548
00:30:25.495 --> 00:30:27.555
So I'm looking for a debug output online

549
00:30:29.425 --> 00:30:31.025
13 on line 13.

550
00:30:31.175 --> 00:30:35.375
This is my list. This is not null.

551
00:30:35.845 --> 00:30:38.335
Okay? Now, uh, I was asking, so if you don't know,

552
00:30:38.475 --> 00:30:40.535
you would not do a null check on a query,

553
00:30:40.675 --> 00:30:43.095
you would always just let it come back with nothing.

554
00:30:44.055 --> 00:30:47.515
I would've. So in my world, right?

555
00:30:47.545 --> 00:30:50.795
Like we, we know to always leave lists constructed.

556
00:30:51.055 --> 00:30:54.755
We always, we are not going to initialize this list to null,

557
00:30:55.095 --> 00:30:56.435
assign a query into it

558
00:30:57.375 --> 00:31:02.115
and then, um, do something like that there.

559
00:31:02.255 --> 00:31:05.315
But even in that, in that case, like almost no code

560
00:31:05.425 --> 00:31:07.955
that does this is actually gonna leave it null.

561
00:31:07.975 --> 00:31:11.635
You'll see tons of Salesforce code that says if all sides,

562
00:31:12.215 --> 00:31:16.255
uh, equals, equals null, well actually, what, this is

563
00:31:16.255 --> 00:31:17.415
what the actual code would look like.

564
00:31:17.435 --> 00:31:20.375
It would look like this. And then there would be some

565
00:31:20.375 --> 00:31:21.575
important code inside here.

566
00:31:22.045 --> 00:31:23.055
Yeah, yeah,

567
00:31:23.515 --> 00:31:24.515
That's what I was asking. Should

568
00:31:24.515 --> 00:31:26.255
you do that when you don't know? How

569
00:31:26.255 --> 00:31:29.895
About if, um, all side is not empty

570
00:31:30.805 --> 00:31:31.895
That you should do?

571
00:31:32.235 --> 00:31:33.575
Yes, there you go.

572
00:31:33.875 --> 00:31:36.095
That's, that's what I'm getting at is a lot

573
00:31:36.095 --> 00:31:37.695
of times you'll see code that looks like this

574
00:31:37.795 --> 00:31:39.535
and this is not gonna help you

575
00:31:40.005 --> 00:31:41.815
because it's never gonna be null.

576
00:31:41.915 --> 00:31:44.495
And sometimes you'll see this or, or sorry,

577
00:31:44.835 --> 00:31:49.365
and all sides that is empty.

578
00:31:51.125 --> 00:31:53.865
Uh, well, you do a knot here is not empty.

579
00:31:54.895 --> 00:31:57.105
This is, this is also kind of an empty pattern

580
00:31:57.105 --> 00:32:00.505
because we're putting very important code in here when

581
00:32:00.505 --> 00:32:01.945
really what we'd wanna do is this.

582
00:32:03.125 --> 00:32:08.005
If all sides that is empty, quit and go home,

583
00:32:10.395 --> 00:32:13.415
and then you put your very important code afterward.

584
00:32:15.625 --> 00:32:17.405
You guys are really smart. So I know

585
00:32:17.405 --> 00:32:19.445
that we can tackle these kind of like things here,

586
00:32:19.905 --> 00:32:23.725
but like this, you write your code like this, oh my gosh,

587
00:32:23.725 --> 00:32:26.875
people are gonna be like, wow, alright then,

588
00:32:27.385 --> 00:32:29.195
Okay, so you should do it on all signs.

589
00:32:29.295 --> 00:32:30.755
You should do an is empty check

590
00:32:30.755 --> 00:32:32.355
first when you're doing a sequel. Yes. So

591
00:32:32.815 --> 00:32:35.155
Yes, Noel is a complete waste of time to do though,

592
00:32:35.315 --> 00:32:38.395
'cause this is always gonna return you an empty list, right?

593
00:32:38.515 --> 00:32:41.805
I promise you at Matt worst, or you'll throw an exception.

594
00:32:41.985 --> 00:32:44.945
But, uh, it shouldn't throw an exception

595
00:32:44.945 --> 00:32:48.785
unless you've, uh, like done something a little crazy.

596
00:32:49.365 --> 00:32:51.305
But this is, this is the most, this is

597
00:32:51.305 --> 00:32:52.385
what we should be really doing here.

598
00:32:52.535 --> 00:32:56.675
Okay? So we know how

599
00:32:56.675 --> 00:32:59.035
to query stuff in, we know how to insert stuff.

600
00:32:59.125 --> 00:33:00.995
Let's start doing some, uh,

601
00:33:01.905 --> 00:33:03.875
more interesting problems with this.

602
00:33:07.085 --> 00:33:10.625
So we know that this is always gonna return a list.

603
00:33:11.085 --> 00:33:13.505
We know that if we want to just get the first record

604
00:33:13.505 --> 00:33:16.425
or one record and we're sure that we're gonna get it back,

605
00:33:17.085 --> 00:33:18.625
we can just do that single assignment.

606
00:33:20.135 --> 00:33:21.555
But yes, Bayo is correct.

607
00:33:21.615 --> 00:33:23.835
We can just check if it's empty, quit and go home.

608
00:33:23.935 --> 00:33:27.665
Uh, real winners quit. Okay?

609
00:33:28.445 --> 00:33:31.945
Uh, I missed M's question, can you create the actual object

610
00:33:32.325 --> 00:33:33.745
or the field from within Apex?

611
00:33:33.825 --> 00:33:35.345
I have seen creating records, but not the

612
00:33:35.345 --> 00:33:36.425
object itself or the field.

613
00:33:37.325 --> 00:33:39.945
You, you sh uh, long answer

614
00:33:40.245 --> 00:33:42.305
or sh long story short for that,

615
00:33:42.805 --> 00:33:45.705
you cannot insert a new field

616
00:33:46.285 --> 00:33:50.465
or a new S object definition with

617
00:33:51.245 --> 00:33:54.625
the, like the default insert

618
00:33:56.325 --> 00:33:58.665
upsert delete DML operations.

619
00:33:59.045 --> 00:34:01.225
You can use something called the metadata.

620
00:34:01.305 --> 00:34:05.305
API, which is an API arrest, API

621
00:34:05.305 --> 00:34:08.305
that you can call in Salesforce to manipulate that.

622
00:34:08.615 --> 00:34:10.665
That is basically deploying data into your

623
00:34:10.665 --> 00:34:11.905
Salesforce org at that point.

624
00:34:12.605 --> 00:34:15.585
Um, but that is all possible with the metadata. API.

625
00:34:16.485 --> 00:34:20.285
Um, that is how you would do that programmatically.

626
00:34:20.465 --> 00:34:21.845
And you can write things called there.

627
00:34:22.045 --> 00:34:24.495
I would say, to put it really simply,

628
00:34:25.095 --> 00:34:27.095
I would look into writing a bash script.

629
00:34:27.105 --> 00:34:30.175
There are many scripting languages that you can use to do,

630
00:34:30.595 --> 00:34:32.495
you know, call outs to systems.

631
00:34:32.595 --> 00:34:34.055
You can do it in Apex if you want,

632
00:34:34.555 --> 00:34:37.015
but you're basically calling out to a service

633
00:34:37.125 --> 00:34:38.815
that your org always has up, just

634
00:34:38.935 --> 00:34:41.695
'cause Salesforce has this available that will allow you

635
00:34:41.695 --> 00:34:43.295
to modify the metadata in your org.

636
00:34:43.685 --> 00:34:45.695
That metadata includes objects.

637
00:34:47.215 --> 00:34:51.455
Oh, let me pull down our, my custom objects later.

638
00:34:52.395 --> 00:34:54.455
So yes, caram, you can do that.

639
00:34:54.675 --> 00:34:56.215
Um, you have to use the metadata.

640
00:34:56.215 --> 00:35:00.755
API we do not cover using that in the course,

641
00:35:02.305 --> 00:35:05.165
but it is important to eventually understand.

642
00:35:07.395 --> 00:35:09.295
So let's, let's work on some interesting,

643
00:35:09.435 --> 00:35:10.655
uh, problems here with this.

644
00:35:10.715 --> 00:35:13.575
So I, I'm gonna tell you all, I have this schema

645
00:35:13.575 --> 00:35:16.375
that I've loosely introduced to you, which is I have meals

646
00:35:17.755 --> 00:35:18.935
and I have sides,

647
00:35:19.195 --> 00:35:22.695
and I also have a third thing which we will define here.

648
00:35:25.805 --> 00:35:26.865
I'm gonna wipe all this out

649
00:35:27.945 --> 00:35:30.245
so we are all on the same page with this knowledge right here.

650
00:35:31.315 --> 00:35:34.535
So I have a couple things. I have, uh,

651
00:35:35.815 --> 00:35:37.005
let's, let's make a class.

652
00:35:37.355 --> 00:35:39.355
Actually we don't need to do all this in Apex Anonymous.

653
00:35:41.495 --> 00:35:45.195
Uh, let's call it, let's call it Meal Factory.

654
00:35:48.015 --> 00:35:50.355
Sounds very, doesn't sound very good.

655
00:35:50.635 --> 00:35:51.715
I wish I could have called this

656
00:35:51.715 --> 00:35:52.915
class grill, but it's too late.

657
00:35:55.235 --> 00:35:58.045
Alright, I'm gonna leave this as with sharing,

658
00:35:58.055 --> 00:36:00.245
since I'm running this as a system admin right now,

659
00:36:00.505 --> 00:36:02.765
and I know I have access to everything,

660
00:36:04.305 --> 00:36:06.925
I'm gonna make a method, public static void.

661
00:36:07.345 --> 00:36:11.285
I'm going to call it a cook meal.

662
00:36:14.695 --> 00:36:17.505
I'm gonna say string, um,

663
00:36:18.825 --> 00:36:21.835
recipient, okay?

664
00:36:24.585 --> 00:36:27.485
I'm also going to make a method.

665
00:36:29.135 --> 00:36:30.855
Actually, we're not make a method yet. So what am I gonna do

666
00:36:30.855 --> 00:36:31.855
as part of cooking my meal?

667
00:36:32.565 --> 00:36:37.285
Well, I need to, uh, create the meal.

668
00:36:38.345 --> 00:36:41.865
I need to, uh, get the sides.

669
00:36:42.545 --> 00:36:46.995
I need to get the burger. Okay?

670
00:36:46.995 --> 00:36:47.995
So I gotta do these things.

671
00:36:48.195 --> 00:36:51.195
I gotta, so I gotta create these, create these two,

672
00:36:53.485 --> 00:36:57.285
and then I need to, uh,

673
00:36:58.485 --> 00:37:02.605
let's say put the meal in the window.

674
00:37:02.845 --> 00:37:07.145
I need to basically say order up or up, you know, so,

675
00:37:07.485 --> 00:37:11.945
and then once someone has picked up my order, I want to mark

676
00:37:12.335 --> 00:37:15.505
that ticket for the meal to be is like done

677
00:37:15.505 --> 00:37:16.785
or delivered or completed.

678
00:37:17.085 --> 00:37:19.665
So then I would say, uh, once picked up,

679
00:37:23.955 --> 00:37:25.855
uh, we would say expo, I guess you would say,

680
00:37:25.875 --> 00:37:27.175
but I'm trying to keep it real simple.

681
00:37:27.595 --> 00:37:31.575
Uh, once it's been picked up, you will, uh, mark

682
00:37:32.645 --> 00:37:34.505
meal as done.

683
00:37:35.455 --> 00:37:37.385
Okay? So I've got these tasks here

684
00:37:37.485 --> 00:37:39.425
and let's write some code to do all these things.

685
00:37:40.385 --> 00:37:42.865
I, as you'll find out, I have a, a meal,

686
00:37:43.225 --> 00:37:44.465
I have sides, I have burger.

687
00:37:45.285 --> 00:37:49.025
And then I, uh, have

688
00:37:49.975 --> 00:37:51.545
some, uh, did I do those?

689
00:37:53.475 --> 00:37:54.795
I did not define the fields yet.

690
00:37:54.795 --> 00:37:56.355
So we'll do that real quick. But this is

691
00:37:56.355 --> 00:37:58.075
what we're gonna do today to kind of explore

692
00:37:58.385 --> 00:38:00.395
what is the connection between doing a query

693
00:38:01.055 --> 00:38:04.755
and, uh, doing DML and some complexities with that.

694
00:38:08.475 --> 00:38:11.615
And my ultimate task over here is going to be, uh,

695
00:38:12.765 --> 00:38:15.135
cook 10 meals for 10 people.

696
00:38:17.635 --> 00:38:19.605
Alright? Everybody on board with this.

697
00:38:19.605 --> 00:38:20.725
We're gonna go through this real quick.

698
00:38:23.865 --> 00:38:26.405
Alright, cool. Uh,

699
00:38:26.615 --> 00:38:29.835
right, let's start with this.

700
00:38:29.835 --> 00:38:33.155
Create the meal. So I would definitely want

701
00:38:33.155 --> 00:38:34.475
to instantiate it.

702
00:38:34.475 --> 00:38:38.715
We know how to, to do this. Uh,

703
00:38:38.975 --> 00:38:40.435
I'm gonna call this m for now.

704
00:38:40.915 --> 00:38:43.035
I know that if this was a real code base,

705
00:38:43.395 --> 00:38:44.835
probably we would call it something more,

706
00:38:44.935 --> 00:38:45.155
but

707
00:38:49.135 --> 00:38:50.105
make a new one.

708
00:38:52.345 --> 00:38:53.405
Now, if,

709
00:38:53.495 --> 00:38:55.645
let's just say my logic is pretty simple for now, right?

710
00:38:56.165 --> 00:38:57.685
I have a name and that's gonna be,

711
00:38:58.915 --> 00:39:00.545
we're gonna put that for the recipient.

712
00:39:00.685 --> 00:39:05.545
So we're gonna say recipient plus, we'll give it the, uh,

713
00:39:05.835 --> 00:39:09.545
possessive and then we'll

714
00:39:09.565 --> 00:39:10.945
say make it their meal.

715
00:39:11.075 --> 00:39:12.145
We'll make it their order.

716
00:39:16.175 --> 00:39:21.025
Okay, then let's do, oh, invalid type.

717
00:39:22.975 --> 00:39:24.465
That wasn't invalid a second ago.

718
00:39:29.235 --> 00:39:31.455
Yes, Riley's right. I am being really lazy.

719
00:39:31.615 --> 00:39:34.215
I will fix it while I'll fix it while we do this.

720
00:39:36.225 --> 00:39:38.165
So if you make a new custom S object

721
00:39:38.345 --> 00:39:40.245
and it's not showing up in your VS code

722
00:39:40.385 --> 00:39:41.565
or a new custom field,

723
00:39:42.975 --> 00:39:45.035
you can do refresh s object definitions.

724
00:39:45.055 --> 00:39:46.155
And this should fix it.

725
00:39:46.465 --> 00:39:48.315
Sometimes it doesn't behave very

726
00:39:48.315 --> 00:39:53.115
well. We'll say it's getting

727
00:39:53.835 --> 00:39:54.875
A little bit into the weeds,

728
00:39:54.935 --> 00:39:58.555
but if you build your project from a manifest

729
00:39:58.615 --> 00:40:02.155
and it doesn't have it in there, then it will continue

730
00:40:02.155 --> 00:40:03.155
to forget about it.

731
00:40:03.775 --> 00:40:05.435
Oh, my manifest is probably empty.

732
00:40:14.505 --> 00:40:15.765
Can you guys tell I'm used?

733
00:40:15.945 --> 00:40:20.695
I'm a, I'm not a consultant warrior developer anymore.

734
00:40:20.835 --> 00:40:23.535
I'm just a stay. I'm a one company developer.

735
00:40:23.595 --> 00:40:25.415
Now, not resilient

736
00:40:26.895 --> 00:40:30.515
Since you're here, I know this is a, a tangent,

737
00:40:30.855 --> 00:40:32.235
but explain what this is.

738
00:40:33.175 --> 00:40:37.225
Yes. So in every project, uh,

739
00:40:37.525 --> 00:40:38.745
and every Salesforce project,

740
00:40:38.755 --> 00:40:41.785
there is a thing called package XML package.

741
00:40:42.105 --> 00:40:46.085
XML defines what types

742
00:40:46.145 --> 00:40:47.165
of S object

743
00:40:47.225 --> 00:40:50.685
or what types of metadata you have inside

744
00:40:50.685 --> 00:40:52.605
of your Salesforce, uh, project.

745
00:40:53.105 --> 00:40:55.005
And my Salesforce project so far,

746
00:40:55.585 --> 00:40:57.645
all we have is APEX classes.

747
00:40:58.395 --> 00:40:59.845
They're in a folder called classes

748
00:41:00.795 --> 00:41:05.485
that is represented in this package, XML under the data,

749
00:41:05.815 --> 00:41:08.645
under the metadata type apex class.

750
00:41:09.435 --> 00:41:14.205
This star means that I am in this project paying attention

751
00:41:14.425 --> 00:41:16.365
to every single Apex class.

752
00:41:16.825 --> 00:41:21.365
The star is a shortcut that says, um, basically

753
00:41:22.245 --> 00:41:23.685
I want to select all.

754
00:41:24.425 --> 00:41:25.765
So, uh,

755
00:41:27.705 --> 00:41:29.845
I'm selecting all my Apex classes for this package.

756
00:41:30.685 --> 00:41:33.005
I have just done that now for custom objects

757
00:41:33.205 --> 00:41:35.005
because this should

758
00:41:35.695 --> 00:41:38.245
cause my custom object to be recognized.

759
00:41:39.335 --> 00:41:40.935
I wish I had remembered to set this up

760
00:41:40.935 --> 00:41:42.175
before, but I did not.

761
00:41:45.935 --> 00:41:46.225
Okay,

762
00:41:52.755 --> 00:41:53.905
we'll see if this works.

763
00:41:53.965 --> 00:41:55.945
If not, I will, we will be learning how

764
00:41:55.945 --> 00:41:57.025
to pull down metadata.

765
00:41:57.645 --> 00:42:00.305
You didn't save your package file, does that matter?

766
00:42:02.615 --> 00:42:03.355
It probably does.

767
00:42:07.365 --> 00:42:07.825
You know what?

768
00:42:07.825 --> 00:42:09.305
Maybe I'll just tell it it exists.

769
00:42:15.495 --> 00:42:18.615
I do not, uh, work with vs. Code on the regular.

770
00:42:19.135 --> 00:42:20.655
I usually use IntelliJ

771
00:42:20.755 --> 00:42:23.015
and I have been working on the same project now for

772
00:42:24.115 --> 00:42:27.885
about two and a half years, no two years.

773
00:42:28.425 --> 00:42:32.125
So I am not used to debugging some

774
00:42:32.125 --> 00:42:33.485
of these annoying error messages.

775
00:42:35.855 --> 00:42:38.035
But, uh, these are things that you may encounter.

776
00:42:38.095 --> 00:42:40.705
So I'll, I will work on them briefly

777
00:42:40.885 --> 00:42:42.985
to see if we can get this to behave itself.

778
00:42:43.945 --> 00:42:44.065
I,

779
00:42:51.555 --> 00:42:54.175
uh, this is my other custom object.

780
00:42:57.585 --> 00:43:02.475
Okay. And then the last thing we'll do is,

781
00:43:02.535 --> 00:43:04.915
uh, this is probably something you'll need to know

782
00:43:05.295 --> 00:43:07.115
for if you do the capstone project.

783
00:43:08.015 --> 00:43:10.235
Uh, there's this thing, you can do this

784
00:43:10.235 --> 00:43:11.835
with the command line, uh,

785
00:43:11.855 --> 00:43:14.195
or you can do this with this thing called org browser

786
00:43:14.615 --> 00:43:19.315
or browser is a way to look at the metadata

787
00:43:19.315 --> 00:43:21.555
that is in your remotely connected org.

788
00:43:21.985 --> 00:43:23.595
When I, when you use the org browser,

789
00:43:25.375 --> 00:43:27.515
you can see all the different types of metadata

790
00:43:27.745 --> 00:43:30.635
that are potentially in your Salesforce organization.

791
00:43:30.975 --> 00:43:32.195
For a lot of organizations,

792
00:43:32.195 --> 00:43:34.435
you will not have things like channel layouts

793
00:43:34.535 --> 00:43:36.915
or uh, custom feed filters.

794
00:43:36.935 --> 00:43:38.155
You may not have these things.

795
00:43:38.975 --> 00:43:41.355
One thing that all almost all orgs will have though is

796
00:43:41.355 --> 00:43:45.275
custom objects or these are gonna have custom

797
00:43:45.295 --> 00:43:46.715
fields, all types of stuff.

798
00:43:47.335 --> 00:43:51.195
And what we can do is we can refresh meaning query the org

799
00:43:51.335 --> 00:43:53.195
to, for this metadata using the metadata.

800
00:43:53.235 --> 00:43:56.875
API, this is a button sort of like user interface

801
00:43:56.905 --> 00:43:58.995
that calls the metadata API.

802
00:43:59.055 --> 00:44:00.675
And we can go and see what's on my org.

803
00:44:01.015 --> 00:44:03.555
You can see that I have this custom object here, burger.

804
00:44:04.215 --> 00:44:06.395
I'm gonna click this and that'll retrieve the source.

805
00:44:07.895 --> 00:44:09.875
So I've just downloaded this definition

806
00:44:09.875 --> 00:44:11.515
of this custom object for myself.

807
00:44:12.355 --> 00:44:14.435
I can do the same thing with my other custom object.

808
00:44:15.535 --> 00:44:16.995
We usually don't cover this in the course,

809
00:44:17.415 --> 00:44:21.785
but uh, anyway, meal,

810
00:44:22.055 --> 00:44:27.025
meal starts with the letter M, which is right here.

811
00:44:27.205 --> 00:44:28.225
I'm gonna download this one.

812
00:44:29.655 --> 00:44:32.445
And then the last one was side, which starts letter S.

813
00:44:32.445 --> 00:44:33.405
It's alphabetized.

814
00:44:39.815 --> 00:44:42.275
So when I do this, it calls the metadata API

815
00:44:42.415 --> 00:44:44.155
and tells Salesforce, Hey, you know

816
00:44:44.155 --> 00:44:46.515
that custom object you have in your user

817
00:44:46.515 --> 00:44:47.555
interface over here?

818
00:44:49.485 --> 00:44:51.695
Well I would like to get the code for that.

819
00:44:52.475 --> 00:44:53.735
And it gives you the code for that

820
00:44:53.735 --> 00:44:56.335
because now I have burger with its fields

821
00:44:58.745 --> 00:45:00.485
and I have meal with its fields

822
00:45:03.925 --> 00:45:07.415
and I have oh my side with its fields

823
00:45:08.405 --> 00:45:09.465
and these all exist.

824
00:45:09.575 --> 00:45:12.425
This is called uh, a concept called configuration is code.

825
00:45:12.805 --> 00:45:14.665
And this is not unique to Salesforce.

826
00:45:14.665 --> 00:45:18.705
There are, uh, all software has this kind of property

827
00:45:18.705 --> 00:45:21.345
of there has to be some way to represent for the computer

828
00:45:22.375 --> 00:45:24.265
what it is you have, uh, created

829
00:45:24.885 --> 00:45:27.345
and for custom objects, this is it.

830
00:45:29.445 --> 00:45:31.105
Now this still has given me problems.

831
00:45:33.045 --> 00:45:34.585
I'm really not sure what it wants at this point.

832
00:45:58.085 --> 00:45:58.375
Well,

833
00:46:03.125 --> 00:46:07.305
I actually do not understand why I have, uh,

834
00:46:07.305 --> 00:46:09.025
really made it upset in this way.

835
00:46:12.355 --> 00:46:16.535
So what we will do is probably just ignore it.

836
00:46:28.215 --> 00:46:30.745
Alright, back to the matter at hand.

837
00:46:34.185 --> 00:46:36.005
It is still gonna do this to me, isn't it?

838
00:46:37.225 --> 00:46:40.195
One moment, let me restart vs code.

839
00:46:47.475 --> 00:46:50.335
See all you guys that are like, oh, I can't get my vs code

840
00:46:50.335 --> 00:46:51.535
to behave like I want it to.

841
00:46:52.575 --> 00:46:54.215
Actually a very normal problem, which is why

842
00:46:54.215 --> 00:46:57.135
after enough years you stop using VS code.

843
00:46:58.595 --> 00:47:03.105
Um, unless I am

844
00:47:04.095 --> 00:47:06.665
able to have just solved my problem.

845
00:47:11.515 --> 00:47:12.535
Can we see vs code?

846
00:47:13.555 --> 00:47:15.685
Yeah, yeah, Perfect. We took the

847
00:47:15.685 --> 00:47:17.165
Problem, We did it.

848
00:47:17.165 --> 00:47:18.565
Nevermind vs. Code rules.

849
00:47:21.665 --> 00:47:23.885
All right, so all we had to do is know all

850
00:47:23.885 --> 00:47:26.645
that information just to get our thing to work right,

851
00:47:26.645 --> 00:47:27.965
which is really wonderful.

852
00:47:30.125 --> 00:47:33.815
Anyway, I have a custom object. It's called meal.

853
00:47:34.115 --> 00:47:35.255
I'm gonna call it order up.

854
00:47:38.445 --> 00:47:41.385
Uh, we're gonna take the input recipient's name

855
00:47:41.405 --> 00:47:42.985
and attach it to the name of the order.

856
00:47:43.845 --> 00:47:45.225
And uh, actually they need to know

857
00:47:45.225 --> 00:47:46.345
what combo they're ordering too.

858
00:47:46.365 --> 00:47:49.385
So I'll take in an info, I'll take in an integer, uh,

859
00:47:49.715 --> 00:47:54.535
combo number and I'll sign that to my

860
00:47:55.635 --> 00:47:58.565
order up, uh, combo.

861
00:48:00.225 --> 00:48:03.355
It's gonna be equal to the combo number. Excellent.

862
00:48:03.625 --> 00:48:05.195
Alright, so I've made my meal.

863
00:48:06.115 --> 00:48:07.715
I don't think I need to insert it into the database

864
00:48:07.715 --> 00:48:09.115
yet though, so I'm not going

865
00:48:09.115 --> 00:48:10.795
to insert it into the database yet.

866
00:48:12.875 --> 00:48:16.735
So now we go into make some sides. No problem.

867
00:48:17.595 --> 00:48:20.495
Uh, we'll just use the side. Oh, don't do this to me.

868
00:48:25.265 --> 00:48:29.455
No, no, no, no, no. Oh, okay. It works.

869
00:48:30.055 --> 00:48:32.455
I was gonna say, I just thought I resolved it.

870
00:48:32.805 --> 00:48:34.135
Okay, so I make a side.

871
00:48:34.555 --> 00:48:36.855
Now the side doesn't really have a lot

872
00:48:36.855 --> 00:48:38.175
of properties to it right now.

873
00:48:38.255 --> 00:48:40.935
I wanted to keep it simple. It just has a name too.

874
00:48:41.305 --> 00:48:44.175
We're just gonna call it the current recipient's, uh, side.

875
00:48:44.715 --> 00:48:45.935
So we'll name it recipient

876
00:48:48.535 --> 00:48:50.635
and then we're gonna add the apostrophe s

877
00:48:52.745 --> 00:48:54.885
and then we're gonna do side,

878
00:48:57.735 --> 00:48:59.235
oh, we'll just do the all in one string

879
00:48:59.695 --> 00:49:02.745
and we're gonna go back and improve this code.

880
00:49:02.745 --> 00:49:04.025
If you're sitting here being like, wow,

881
00:49:04.025 --> 00:49:06.385
chase should really like do better, uh,

882
00:49:06.405 --> 00:49:10.255
and improve this code, yes, we will be doing that as soon

883
00:49:10.255 --> 00:49:13.215
as we get to the, uh, the complexities.

884
00:49:13.215 --> 00:49:16.855
But this, when you're starting out with a problem, you know,

885
00:49:16.855 --> 00:49:19.535
keeping your code compiling and going through

886
00:49:19.535 --> 00:49:21.815
and tackling each of the, the elements

887
00:49:21.815 --> 00:49:23.895
of your problem is a great place to start.

888
00:49:24.795 --> 00:49:28.535
Uh, so my side needs to actually go with my meal

889
00:49:28.995 --> 00:49:31.855
and I have that represented with a relationship.

890
00:49:32.755 --> 00:49:37.535
Uh, I've made a lookup relationship on my side called Meal

891
00:49:37.685 --> 00:49:41.655
that is going to relate my side up to a parent meal.

892
00:49:44.565 --> 00:49:46.945
How, how can I connect?

893
00:49:47.005 --> 00:49:50.345
The two things though is becomes the real question.

894
00:49:53.525 --> 00:49:54.945
Do we know, does anybody know the answer to this?

895
00:50:02.055 --> 00:50:04.345
A lookup? Definitely,

896
00:50:04.345 --> 00:50:06.705
definitely there is a lookup element happening right here,

897
00:50:07.245 --> 00:50:08.505
but you use notation.

898
00:50:10.455 --> 00:50:12.215
I I am using dot notation right here

899
00:50:12.235 --> 00:50:14.695
to say I wanna assign my field the

900
00:50:14.875 --> 00:50:15.875
Id. Can you not

901
00:50:15.875 --> 00:50:18.095
yet because we haven't inserted anything.

902
00:50:18.405 --> 00:50:20.135
Yeah, that's right. I I can't do it yet

903
00:50:20.135 --> 00:50:22.655
because someone said by ID and then someone said, mark

904
00:50:22.835 --> 00:50:24.695
or Blanche, you said I need an ID

905
00:50:24.955 --> 00:50:26.655
and Mark you said you can't do

906
00:50:26.655 --> 00:50:27.845
that 'cause you haven't inserted it.

907
00:50:28.385 --> 00:50:32.795
So now I need to, need to have the meal ID here.

908
00:50:35.015 --> 00:50:37.465
Okay, can I have my meal ID right now?

909
00:50:38.965 --> 00:50:41.145
No. Why not? Because

910
00:50:41.145 --> 00:50:42.985
You haven't inserted or saved it to the database yet.

911
00:50:43.675 --> 00:50:46.055
That's right. Yeah. I actually, uh,

912
00:50:46.865 --> 00:50:48.735
don't have this in my database yet.

913
00:50:49.585 --> 00:50:54.015
Right now this is just in my code, in the memory of my code.

914
00:50:54.335 --> 00:50:57.535
I actually don't know what id,

915
00:50:57.535 --> 00:50:58.975
Salesforce is gonna give this record.

916
00:50:59.275 --> 00:51:02.215
So I don't have any way to connect the two things

917
00:51:02.405 --> 00:51:05.655
because when you make a lookup relationship in the UI over

918
00:51:05.855 --> 00:51:09.535
here, uh, let's go to my side.

919
00:51:15.135 --> 00:51:17.105
When I've defined this lookup relationship

920
00:51:17.105 --> 00:51:20.745
to meal right here, this is created using a

921
00:51:20.745 --> 00:51:22.225
Salesforce ID by default.

922
00:51:22.275 --> 00:51:23.865
There are other ways to relate things,

923
00:51:23.965 --> 00:51:27.865
but to keep it simple, this is the way that we are go,

924
00:51:27.925 --> 00:51:30.665
we are by default connecting things in Salesforce.

925
00:51:32.205 --> 00:51:33.305
So I need the id.

926
00:51:35.195 --> 00:51:37.055
So now I gotta insert my, my order

927
00:51:39.485 --> 00:51:41.545
and that can be done as easily as this right here

928
00:51:41.815 --> 00:51:43.905
because once I have inserted this

929
00:51:44.215 --> 00:51:46.665
with this statement right here, it gains an id.

930
00:51:47.725 --> 00:51:51.705
So my order right here, my meal order up is going

931
00:51:51.725 --> 00:51:52.905
to have an ID

932
00:51:53.035 --> 00:51:55.145
after I successfully call, insert

933
00:51:56.925 --> 00:52:01.855
the order up ID field exists.

934
00:52:02.035 --> 00:52:04.645
Now, this actually has a value.

935
00:52:04.695 --> 00:52:06.485
We'll, we'll print that value out just to prove that

936
00:52:06.485 --> 00:52:08.165
to ourselves as we're working on this method.

937
00:52:16.215 --> 00:52:17.875
Uh, we're actually gonna print it out pretty

938
00:52:17.875 --> 00:52:21.585
because I am, I'm blind.

939
00:52:25.585 --> 00:52:28.885
Okay? And actually we're gonna show before and after.

940
00:52:31.605 --> 00:52:33.425
So we're not gonna do this just yet.

941
00:52:36.525 --> 00:52:38.155
Let's just run our code up to this point

942
00:52:38.155 --> 00:52:39.915
because when I'm programming, I try

943
00:52:39.915 --> 00:52:41.315
to keep my code in a positive state.

944
00:52:41.355 --> 00:52:42.595
I try to keep it compiling.

945
00:52:42.595 --> 00:52:45.315
I try to keep my, uh,

946
00:52:46.565 --> 00:52:49.225
my compiler happy so that it doesn't have red lines.

947
00:52:49.245 --> 00:52:51.625
So I was able to save and deploy this even though I'm in

948
00:52:51.865 --> 00:52:53.705
progress 'cause of the way I'm writing my code.

949
00:52:54.605 --> 00:52:56.585
So let's, we can't do this yet,

950
00:52:58.885 --> 00:53:00.985
but let's just try running one part

951
00:53:00.985 --> 00:53:03.625
of the method right here, which has gone to be, let's see

952
00:53:03.625 --> 00:53:06.145
what happens before and after I insert this,

953
00:53:15.275 --> 00:53:16.375
I'm gonna give, use my own name

954
00:53:16.495 --> 00:53:18.295
'cause I'm a little, I might be a little hungry right now.

955
00:53:19.735 --> 00:53:21.635
I'm just gonna do that just like this.

956
00:53:21.895 --> 00:53:24.835
So this is gonna call again the Meal Factory

957
00:53:24.935 --> 00:53:26.245
class, calling this method.

958
00:53:26.555 --> 00:53:28.285
It's a static method so I don't have

959
00:53:28.285 --> 00:53:29.885
to create an instance of it.

960
00:53:30.555 --> 00:53:31.885
It's going to take my name in

961
00:53:31.885 --> 00:53:33.645
and the combo number that I specified

962
00:53:34.305 --> 00:53:37.405
and cook this, cook this meal or get it started.

963
00:53:37.425 --> 00:53:38.645
Anyway, let's see where we're at.

964
00:53:44.105 --> 00:53:46.565
All right, so we're reading through here. Very cool.

965
00:53:46.785 --> 00:53:51.675
All right, so this is our first debug statement creates, uh,

966
00:53:52.545 --> 00:53:54.805
an object of s object of type meal.

967
00:53:55.665 --> 00:53:56.765
Its name is Chase's order.

968
00:53:56.865 --> 00:54:01.475
The combo is number one and it has no id, there's no ID yet,

969
00:54:01.975 --> 00:54:05.145
but just like magic it appears

970
00:54:06.035 --> 00:54:07.305
after I have inserted it.

971
00:54:07.755 --> 00:54:10.865
Salesforce says I took care of that for you.

972
00:54:11.565 --> 00:54:13.985
You don't need to worry about going and querying the record.

973
00:54:13.995 --> 00:54:16.545
Again, another anti-pattern you will see in a lot

974
00:54:16.545 --> 00:54:18.785
of code is people will insert a record

975
00:54:19.125 --> 00:54:21.185
and then immediately re-query it.

976
00:54:22.525 --> 00:54:26.255
That is not necessary if you only need the id.

977
00:54:26.685 --> 00:54:30.055
However, if we had some other automations here,

978
00:54:30.165 --> 00:54:34.055
like a trigger or a record triggered flow running,

979
00:54:34.615 --> 00:54:36.735
I would have to re-query the record.

980
00:54:37.215 --> 00:54:38.815
'cause my code doesn't know about that.

981
00:54:39.555 --> 00:54:42.145
My code just knows the name

982
00:54:42.405 --> 00:54:45.225
and the, the combo number I've assigned it

983
00:54:45.365 --> 00:54:47.425
and it will get the ID back when it's done.

984
00:54:47.845 --> 00:54:50.705
It doesn't know about anything else that happened outside

985
00:54:50.705 --> 00:54:52.865
of its purview, outside of its world.

986
00:54:52.885 --> 00:54:55.505
It doesn't know in your system's memory.

987
00:54:56.485 --> 00:54:57.985
It only has the name, the combo

988
00:54:58.165 --> 00:55:00.225
and then it gains the ID after the insert.

989
00:55:00.335 --> 00:55:01.825
Doesn't know anything else in the memory

990
00:55:02.345 --> 00:55:04.835
because if it did, that would be breaking kind the way

991
00:55:04.835 --> 00:55:05.835
that programming languages work.

992
00:55:06.295 --> 00:55:07.795
It would have to allocate memory,

993
00:55:08.215 --> 00:55:09.875
assign all these fields for you.

994
00:55:10.135 --> 00:55:11.595
It would be a bit more complicated.

995
00:55:11.855 --> 00:55:13.795
So we don't actually need to requery here yet.

996
00:55:15.955 --> 00:55:18.495
So we actually got our ID now. So that's really good.

997
00:55:18.895 --> 00:55:19.975
'cause now I can make my side

998
00:55:24.955 --> 00:55:29.265
and how to relate records as I'm creating them is I'm going

999
00:55:29.265 --> 00:55:34.235
to just do order up id because I have this id.

1000
00:55:34.295 --> 00:55:36.195
Now I can create the lookup relationship.

1001
00:55:38.025 --> 00:55:39.525
Now I can insert my side

1002
00:55:41.345 --> 00:55:43.285
and I could do the same thing for the burger as well.

1003
00:55:46.795 --> 00:55:50.415
That's really easy. This is boilerplate code at this point.

1004
00:55:50.855 --> 00:55:54.635
Burger V, uh,

1005
00:55:54.975 --> 00:55:57.155
slider equals new burger.

1006
00:56:02.345 --> 00:56:04.085
And now you can do your code either way.

1007
00:56:05.705 --> 00:56:08.925
Um, if you choose to do it like this, make sure

1008
00:56:08.925 --> 00:56:10.045
that you are indenting.

1009
00:56:10.625 --> 00:56:13.405
See I have this indent here so you can tell that we're

1010
00:56:13.405 --> 00:56:14.645
inside the constructor

1011
00:56:14.645 --> 00:56:15.765
because a lot

1012
00:56:15.765 --> 00:56:17.365
of times you're gonna assign a whole bunch of fields.

1013
00:56:18.545 --> 00:56:20.165
So you'll see people write it like this

1014
00:56:21.295 --> 00:56:22.355
and you'll see some people that

1015
00:56:22.355 --> 00:56:23.440
prefer to write it it like this.

1016
00:56:24.125 --> 00:56:27.205
I honestly don't necessarily have an opinion.

1017
00:56:27.605 --> 00:56:28.685
I think that this can be harder

1018
00:56:28.685 --> 00:56:30.085
to modify and harder to read.

1019
00:56:30.225 --> 00:56:33.005
So I generally will be writing code like this just

1020
00:56:33.125 --> 00:56:37.425
'cause it's, it's more like straightforward I guess.

1021
00:56:38.125 --> 00:56:40.025
Um, and it doesn't really hurt the readability at all

1022
00:56:40.025 --> 00:56:41.985
because I'm just gonna be doing this anyway.

1023
00:56:44.385 --> 00:56:46.625
I think it's not necessarily that much harder to read.

1024
00:56:51.265 --> 00:56:53.405
Uh, the, but you will note that a lot

1025
00:56:53.405 --> 00:56:58.135
of programming languages will be using uh,

1026
00:56:59.825 --> 00:57:03.685
uh, syntax like this to create objects,

1027
00:57:04.625 --> 00:57:07.735
especially Java go

1028
00:57:09.785 --> 00:57:11.445
um, dot net.

1029
00:57:12.575 --> 00:57:14.055
A lot of programming languages have stuff

1030
00:57:14.055 --> 00:57:15.775
that looks like this when they create objects.

1031
00:57:16.755 --> 00:57:18.005
This also has a lookup.

1032
00:57:18.425 --> 00:57:19.925
I'm just gonna do the same thing again.

1033
00:57:19.985 --> 00:57:22.165
I'm gonna use the, the meals ID

1034
00:57:23.855 --> 00:57:25.875
and this is all we have to do in this case.

1035
00:57:25.935 --> 00:57:27.275
And then we can just call insert.

1036
00:57:31.185 --> 00:57:34.345
So my variables are

1037
00:57:35.735 --> 00:57:40.325
specifying the intent of my code,

1038
00:57:40.865 --> 00:57:42.805
not the data types or anything like that.

1039
00:57:43.715 --> 00:57:45.165
Sometimes it's so simple though.

1040
00:57:45.165 --> 00:57:46.285
You might want to name it like this.

1041
00:57:46.715 --> 00:57:50.805
Sometimes you wanna express the intent, uh, which is, that

1042
00:57:51.455 --> 00:57:55.765
would be slider to attach for slider for a meal.

1043
00:57:56.465 --> 00:57:59.005
You know, you could get as cute with it as you want to get.

1044
00:58:00.745 --> 00:58:03.445
Uh, now again, another thing we should note is just like

1045
00:58:03.445 --> 00:58:06.965
with queries we can run queries with uh, the database class

1046
00:58:07.995 --> 00:58:12.635
or we can do database query and say select whatever.

1047
00:58:13.655 --> 00:58:15.675
We can also do database insert.

1048
00:58:17.515 --> 00:58:19.375
And when we do database insert,

1049
00:58:19.555 --> 00:58:22.865
we can still put in an S object like this.

1050
00:58:24.465 --> 00:58:28.395
Both of these syntaxes do the same thing. Roughly speaking.

1051
00:58:29.855 --> 00:58:33.795
Uh, I generally prefer this syntax database do insert.

1052
00:58:34.175 --> 00:58:36.275
The reason for that is if you're working with, uh,

1053
00:58:36.295 --> 00:58:40.675
cross-functional teams, this looks very weird

1054
00:58:40.935 --> 00:58:43.315
to people that have no other programming languages.

1055
00:58:43.585 --> 00:58:45.995
When I first encountered this, I was very confused.

1056
00:58:46.075 --> 00:58:47.675
I was like, is there a variable

1057
00:58:48.015 --> 00:58:51.195
of type insert called side?

1058
00:58:52.005 --> 00:58:53.555
There is not. Um,

1059
00:58:55.075 --> 00:58:57.525
this is just a special apex only thing

1060
00:58:57.525 --> 00:58:58.805
where they've defined that.

1061
00:58:58.865 --> 00:59:00.205
If you say the word insert,

1062
00:59:00.745 --> 00:59:04.165
it is gonna do database insert on that next object.

1063
00:59:04.865 --> 00:59:09.085
So, um, this looks weird to me. Even to this day.

1064
00:59:09.245 --> 00:59:13.485
I don't love it. Um, if I could, I would always do this.

1065
00:59:14.145 --> 00:59:15.285
And there's more reasons for

1066
00:59:15.285 --> 00:59:17.965
that than I'll explain, uh, soon.

1067
00:59:18.965 --> 00:59:20.955
Stacy, is that the same for update

1068
00:59:21.305 --> 00:59:24.845
and the other DML operations database update?

1069
00:59:26.325 --> 00:59:28.695
Cool. Has 'em all. You can do 'em all.

1070
00:59:28.915 --> 00:59:32.215
Uh, the database class is one piece of documentation.

1071
00:59:32.395 --> 00:59:34.495
If you're genuinely curious, I'd recommend reading

1072
00:59:34.655 --> 00:59:35.655
'cause there's some very powerful

1073
00:59:35.655 --> 00:59:36.415
things you can do with this.

1074
00:59:37.435 --> 00:59:39.535
Uh, however, for our purposes,

1075
00:59:39.535 --> 00:59:40.735
this is usually gonna be enough.

1076
00:59:44.025 --> 00:59:47.645
Let me grab the, uh, questions from chat.

1077
00:59:48.115 --> 00:59:49.605
Glad you don't have to explicitly query

1078
00:59:49.605 --> 00:59:51.125
to get the ID back me too.

1079
00:59:51.225 --> 00:59:52.925
Be a waste of a query. 'cause it it

1080
00:59:52.925 --> 00:59:54.045
does know the ID at the time.

1081
00:59:54.045 --> 00:59:57.285
You insert it if cooked meal is the method. That's right.

1082
00:59:58.035 --> 01:00:01.925
What is order up? Uh, order up is the meal.

1083
01:00:02.605 --> 01:00:05.125
I I could call it meal. I suppose

1084
01:00:11.785 --> 01:00:14.225
I, I, um, I don't know.

1085
01:00:14.405 --> 01:00:16.265
The variable names are so straightforward here

1086
01:00:16.975 --> 01:00:18.665
because our data model is very simple.

1087
01:00:20.715 --> 01:00:24.875
Thanks. Yeah, it's, I didn't, like I said

1088
01:00:25.255 --> 01:00:27.715
Off one and I was trying to figure it out and so,

1089
01:00:28.215 --> 01:00:29.215
Oh no, you're good. I don't,

1090
01:00:29.215 --> 01:00:31.995
I'm not trying to be confusing, um, at all.

1091
01:00:32.195 --> 01:00:34.555
I apologize. So we can do either one here

1092
01:00:34.615 --> 01:00:36.275
and we're getting everything done with our,

1093
01:00:36.275 --> 01:00:37.555
with our task here.

1094
01:00:37.665 --> 01:00:39.195
However, now we get to this part,

1095
01:00:39.695 --> 01:00:43.795
put the meal in the window, meaning like complete it, uh,

1096
01:00:44.135 --> 01:00:45.875
as if, as if the order were done.

1097
01:00:46.175 --> 01:00:50.795
So at this point, do we need to re-update our meal

1098
01:00:51.345 --> 01:00:54.675
just because we've attached these two relationships?

1099
01:00:59.205 --> 01:01:00.585
Do we need to do that or no?

1100
01:01:01.205 --> 01:01:03.955
No. Why don't I need to do that?

1101
01:01:06.665 --> 01:01:09.205
So if I understand it right, uh, you're

1102
01:01:09.795 --> 01:01:13.285
looking at like sort of the parent object of the lookups

1103
01:01:14.095 --> 01:01:15.755
And yeah, so this would be our parent

1104
01:01:15.755 --> 01:01:18.555
because right, this is at the top level

1105
01:01:19.655 --> 01:01:21.675
and then this looks up to the meal

1106
01:01:22.135 --> 01:01:24.795
and then this burger looks up to the meal.

1107
01:01:26.355 --> 01:01:28.495
So the question is, do you have to do

1108
01:01:28.495 --> 01:01:30.175
what now? Requery, do

1109
01:01:30.215 --> 01:01:32.615
I, do I need to update my meal again?

1110
01:01:33.195 --> 01:01:34.985
No. Why not?

1111
01:01:36.475 --> 01:01:39.845
Well, 'cause the meal ID exists and it's, it's just there.

1112
01:01:40.105 --> 01:01:44.365
So, uh, the, the, the meal record, I guess,

1113
01:01:44.835 --> 01:01:45.885
Yeah. Did I change

1114
01:01:46.595 --> 01:01:48.085
This record and it's got an ID

1115
01:01:48.105 --> 01:01:50.685
and then you're just referencing that ID from the others?

1116
01:01:51.995 --> 01:01:54.485
Yeah. So when I do these two things down here,

1117
01:01:55.305 --> 01:01:58.165
you might think, oh, I'm changing what I have done.

1118
01:01:59.405 --> 01:02:00.665
You are not changing anything.

1119
01:02:00.955 --> 01:02:03.465
These are able to be inserted

1120
01:02:03.465 --> 01:02:06.545
or updated without affecting this at all

1121
01:02:08.035 --> 01:02:12.455
in our current world, nothing I do, I could,

1122
01:02:12.695 --> 01:02:14.895
I could make a second side if I felt like it.

1123
01:02:18.425 --> 01:02:19.215
Other side

1124
01:02:28.235 --> 01:02:29.285
just copy this over.

1125
01:02:38.155 --> 01:02:43.075
Oh, well and

1126
01:02:43.115 --> 01:02:44.275
I could also relate this

1127
01:02:45.655 --> 01:02:48.195
and it, it just does not have any, uh,

1128
01:02:48.195 --> 01:02:49.515
effect on the meal itself.

1129
01:02:49.515 --> 01:02:53.065
Really. I can do this

1130
01:02:54.355 --> 01:02:55.415
as many times as I want,

1131
01:02:55.415 --> 01:02:57.015
but it never is going to affect this

1132
01:02:57.165 --> 01:03:01.985
because in essence, we are, we are modifying this record.

1133
01:03:02.775 --> 01:03:05.105
This just happens to have a piece of data

1134
01:03:05.335 --> 01:03:06.785
that belongs to this meal.

1135
01:03:07.125 --> 01:03:10.705
And because Salesforce is a database that is designed

1136
01:03:10.705 --> 01:03:14.505
to be very convenient and very fast, when I

1137
01:03:15.055 --> 01:03:17.905
have this id, which is known as a key

1138
01:03:19.335 --> 01:03:23.445
in another record that does not pertain to it,

1139
01:03:24.145 --> 01:03:25.725
it becomes related.

1140
01:03:26.465 --> 01:03:28.995
This is called in other databases we would call this a

1141
01:03:28.995 --> 01:03:31.995
foreign key because this key

1142
01:03:32.495 --> 01:03:35.395
to the meal is foreign to the side.

1143
01:03:35.625 --> 01:03:40.195
However, the key on meal, which is its ID,

1144
01:03:40.495 --> 01:03:43.955
is a primary key, which means it is unique

1145
01:03:44.935 --> 01:03:47.275
and it only belongs to the meal.

1146
01:03:48.115 --> 01:03:50.625
These are just referencing it like Mike said.

1147
01:03:50.925 --> 01:03:52.385
So this does not, so they're related records.

1148
01:03:52.735 --> 01:03:53.785
They're related records

1149
01:03:54.085 --> 01:03:56.265
and we have related them using the IDs.

1150
01:03:56.895 --> 01:03:57.185
Yeah.

1151
01:04:01.605 --> 01:04:04.895
Okay, so we've done all this stuff now, now we need

1152
01:04:04.895 --> 01:04:07.175
to mark it as like a completed or whatever.

1153
01:04:07.315 --> 01:04:10.695
So I don't have a field for that,

1154
01:04:10.715 --> 01:04:12.095
but we can make one real quick.

1155
01:04:13.435 --> 01:04:14.655
Can just real quick make one

1156
01:04:18.725 --> 01:04:22.325
in my uh, developer org.

1157
01:04:22.325 --> 01:04:23.765
Here I'll make a new one.

1158
01:04:26.305 --> 01:04:27.705
I am just gonna keep it really simple.

1159
01:04:27.925 --> 01:04:29.625
In the real world, I would probably make this a

1160
01:04:29.625 --> 01:04:30.665
status pick list.

1161
01:04:31.445 --> 01:04:34.905
But uh, in our world, I'm just gonna use a checkbox

1162
01:04:36.065 --> 01:04:37.005
to say that it's done

1163
01:04:43.415 --> 01:04:44.625
default, not done.

1164
01:04:52.545 --> 01:04:55.705
I could also do this and uh, I would probably do this

1165
01:04:57.425 --> 01:05:01.675
if I had to make a lot of fields using the metadata itself.

1166
01:05:06.375 --> 01:05:08.515
So now I have this field that's available to me.

1167
01:05:08.615 --> 01:05:11.385
If I were to update, but I can set the true

1168
01:05:11.385 --> 01:05:15.845
or false, it's probably gonna tell me it doesn't exist

1169
01:05:15.845 --> 01:05:18.605
though because I need to refresh it.

1170
01:05:22.985 --> 01:05:25.045
So check boxes get represented as Boolean,

1171
01:05:25.045 --> 01:05:26.085
it's gonna tell me it doesn't exist.

1172
01:05:36.195 --> 01:05:38.665
Let's do that quick resolution for that refresh.

1173
01:05:38.945 --> 01:05:40.065
S object definitions.

1174
01:05:43.555 --> 01:05:45.385
While it's doing that though, um,

1175
01:05:45.765 --> 01:05:47.265
now I actually have to update this.

1176
01:05:51.425 --> 01:05:53.665
I can do it with just an update statement right here.

1177
01:05:55.095 --> 01:05:57.875
Um, does this change anything about

1178
01:05:57.875 --> 01:05:59.035
the record for me locally?

1179
01:06:01.215 --> 01:06:04.225
Locally? Meaning in my code, in my code's memory right now?

1180
01:06:04.255 --> 01:06:05.255
Does this change anything?

1181
01:06:06.675 --> 01:06:08.095
No, the ID remains the same.

1182
01:06:08.405 --> 01:06:09.935
Yeah, ID is the same.

1183
01:06:10.475 --> 01:06:14.335
Uh, the record is exactly as I described it above here

1184
01:06:14.385 --> 01:06:17.135
where it has this name, has this combo number

1185
01:06:17.795 --> 01:06:21.055
and uh, it's gonna have this set to true now.

1186
01:06:21.725 --> 01:06:23.505
So the important thing to note is this.

1187
01:06:26.045 --> 01:06:27.685
If I insert a record

1188
01:06:28.185 --> 01:06:29.925
and some stuff gets changed on it

1189
01:06:31.185 --> 01:06:34.245
in like a record triggered flow or a trigger

1190
01:06:35.065 --> 01:06:36.765
or something else

1191
01:06:36.785 --> 01:06:39.565
that's running automatically like a even a workflow rule,

1192
01:06:40.275 --> 01:06:44.035
dare I say my code does not know

1193
01:06:44.165 --> 01:06:45.315
about that process.

1194
01:06:46.215 --> 01:06:50.515
It knows about exactly the specific definition of this

1195
01:06:50.735 --> 01:06:53.995
and all the pieces of it as it exists right now on my code.

1196
01:06:54.255 --> 01:06:55.515
So if I insert it

1197
01:06:55.775 --> 01:06:58.195
and something changes that I the code doesn't know about,

1198
01:06:58.575 --> 01:07:01.515
and then I use that same record, that same variable

1199
01:07:01.855 --> 01:07:03.475
to then update it, I might

1200
01:07:03.505 --> 01:07:05.115
overwrite anything that it changes.

1201
01:07:06.945 --> 01:07:08.635
This is very, very, very important.

1202
01:07:09.315 --> 01:07:11.915
'cause a lot of times if you're not designing your code

1203
01:07:11.915 --> 01:07:15.895
carefully, you can end up, uh,

1204
01:07:16.525 --> 01:07:18.695
erasing what an automation has done.

1205
01:07:19.435 --> 01:07:22.175
So like if I had an automation that would verify

1206
01:07:22.175 --> 01:07:24.095
that the order was truly up, like

1207
01:07:24.095 --> 01:07:28.635
as in my automation would set this to false anytime

1208
01:07:28.635 --> 01:07:29.715
that it detected

1209
01:07:29.715 --> 01:07:32.955
that there were no children's sides or children burger.

1210
01:07:35.575 --> 01:07:38.095
I might, every time I put in that it's true,

1211
01:07:38.195 --> 01:07:42.305
it might change it to false and I could overwrite that value

1212
01:07:42.485 --> 01:07:43.905
and then the trigger would do it again.

1213
01:07:44.085 --> 01:07:45.465
It would run that trigger again

1214
01:07:45.465 --> 01:07:46.825
and change things on the record.

1215
01:07:47.805 --> 01:07:50.065
Be very mindful of the difference between

1216
01:07:51.655 --> 01:07:55.905
what is in your code and what is in the database as well.

1217
01:07:57.025 --> 01:07:58.625
'cause here's another thing I wanna point out.

1218
01:08:01.505 --> 01:08:03.695
Let's say, uh, I've cooked this meal

1219
01:08:03.695 --> 01:08:04.975
and this, this works just fine.

1220
01:08:05.955 --> 01:08:07.905
We're gonna ignore that order up, not

1221
01:08:08.455 --> 01:08:09.785
that error message right there.

1222
01:08:10.625 --> 01:08:11.855
Let's say I have another method.

1223
01:08:12.575 --> 01:08:15.725
I I've served this uh, plate to the customer.

1224
01:08:16.545 --> 01:08:19.885
The customer says, you know what? This is cooked wrong.

1225
01:08:20.485 --> 01:08:21.925
I need you to refire it.

1226
01:08:24.425 --> 01:08:27.375
Let's make a method to represent this, uh, fun scenario

1227
01:08:27.385 --> 01:08:30.215
where someone says, I don't like it, refire it.

1228
01:08:33.455 --> 01:08:38.095
Um, if I were to refire it, I would want

1229
01:08:38.095 --> 01:08:42.655
to know whose order this was.

1230
01:08:43.155 --> 01:08:44.495
And I would also want to know,

1231
01:08:45.115 --> 01:08:46.415
you know, what's wrong with it, right?

1232
01:08:46.515 --> 01:08:50.875
But for our simple scenario, we'll just say refire order

1233
01:08:51.295 --> 01:08:52.795
or refi me refire meal.

1234
01:08:53.335 --> 01:08:56.875
So I could, I could do this a couple ways depending on

1235
01:08:56.875 --> 01:08:58.355
what information I have, right?

1236
01:08:58.835 --> 01:09:02.515
I might have the exact specific plate that is wrong,

1237
01:09:02.775 --> 01:09:04.635
the exact specific meal that is wrong.

1238
01:09:05.545 --> 01:09:07.425
I could represent that with an id.

1239
01:09:10.015 --> 01:09:11.895
I might also only know their name.

1240
01:09:13.055 --> 01:09:15.795
If I only know their name, I'm gonna have to query

1241
01:09:15.855 --> 01:09:17.735
for it, right?

1242
01:09:18.285 --> 01:09:22.155
However, if I'm going to, uh,

1243
01:09:22.415 --> 01:09:24.115
change something about this meal

1244
01:09:26.195 --> 01:09:29.415
and I only have the id, do I need to query it?

1245
01:09:32.905 --> 01:09:36.175
Yes or no? Let's say I wanna change something about this

1246
01:09:36.175 --> 01:09:40.225
meal I've defined up here later on in the, like,

1247
01:09:40.285 --> 01:09:41.665
in a completely separate time.

1248
01:09:43.005 --> 01:09:45.425
All I have is the id. Do I need to reque?

1249
01:09:46.425 --> 01:09:49.565
Are you gonna query it in here, right? Yeah, you do.

1250
01:09:50.515 --> 01:09:51.725
It's not been written yet.

1251
01:09:51.955 --> 01:09:55.045
Depends on the order of your execution, doesn't it?

1252
01:09:57.375 --> 01:09:58.635
All right, so let's explore this

1253
01:09:58.635 --> 01:10:00.515
because I think this is a, uh, uh,

1254
01:10:02.385 --> 01:10:03.435
this is an important point.

1255
01:10:06.515 --> 01:10:08.015
I'm gonna query it up right here.

1256
01:10:12.605 --> 01:10:14.805
I know specifically which meal it should be,

1257
01:10:14.905 --> 01:10:16.685
unless it gets deleted by the time

1258
01:10:16.685 --> 01:10:17.885
that this method gets called,

1259
01:10:18.195 --> 01:10:19.485
it's probably gonna still exist.

1260
01:10:19.905 --> 01:10:21.245
So I can do a list of meals

1261
01:10:21.705 --> 01:10:24.045
and I can do select I id from meal,

1262
01:10:26.835 --> 01:10:31.465
uh, where the ID is equal to, uh,

1263
01:10:32.025 --> 01:10:35.345
a specific meal id, I'm gonna use the bind operator here

1264
01:10:36.045 --> 01:10:39.225
and bind the meal ID into my query that I'm running.

1265
01:10:40.765 --> 01:10:44.415
This is going to get me every single meal in my database

1266
01:10:44.765 --> 01:10:46.535
that has this specific id.

1267
01:10:47.035 --> 01:10:50.175
And as we know, this is a primary key.

1268
01:10:51.725 --> 01:10:53.855
This is a very specific key,

1269
01:10:54.845 --> 01:10:58.095
meaning there's only one record with this key ever.

1270
01:10:58.565 --> 01:10:59.775
That is just a guarantee

1271
01:10:59.775 --> 01:11:01.575
that you have when you use a Salesforce.

1272
01:11:01.755 --> 01:11:05.735
Id like this. So in theory, I don't need

1273
01:11:05.735 --> 01:11:06.775
to query a whole list.

1274
01:11:07.295 --> 01:11:09.855
I could just do this because I'm pretty confident

1275
01:11:09.855 --> 01:11:13.055
that it is the, it is a meal for rehiring.

1276
01:11:16.405 --> 01:11:18.265
All right, so what do I want to change about this?

1277
01:11:18.775 --> 01:11:22.705
Well, first of all, the meal for rehiring, I should

1278
01:11:23.655 --> 01:11:25.115
set it to order up false.

1279
01:11:29.835 --> 01:11:33.895
And I also am going to, uh, change the combo number

1280
01:11:33.895 --> 01:11:35.215
because maybe it was the wrong combo.

1281
01:11:38.215 --> 01:11:42.655
Uh, meal for a firing dot combo equals,

1282
01:11:42.875 --> 01:11:44.015
uh, is a number two.

1283
01:11:44.285 --> 01:11:48.835
Instead, maybe we could even call this

1284
01:11:48.835 --> 01:11:50.035
fixed combo or something.

1285
01:11:50.495 --> 01:11:54.915
Either way, uh, I I have now fixed the order, right?

1286
01:11:55.295 --> 01:11:56.755
And I can resubmit it,

1287
01:12:00.015 --> 01:12:03.605
going to resubmit my food to say that I have fixed it.

1288
01:12:03.625 --> 01:12:04.805
Now it's the right combo.

1289
01:12:06.235 --> 01:12:10.505
However, did I need to query

1290
01:12:11.195 --> 01:12:14.455
order up in combo in order to change them?

1291
01:12:15.035 --> 01:12:16.035
Yes or no?

1292
01:12:17.185 --> 01:12:19.685
If you wanted to change that record, yes. Okay.

1293
01:12:20.505 --> 01:12:21.585
I think you could.

1294
01:12:22.145 --> 01:12:26.985
I I'm not sure if, um, when you committed it initially

1295
01:12:27.525 --> 01:12:29.985
if the result would come as a map.

1296
01:12:30.725 --> 01:12:35.345
But I think we could set in the, like the block of, um,

1297
01:12:35.495 --> 01:12:39.585
code that comes in after you post, insert it,

1298
01:12:40.085 --> 01:12:44.425
and be able to pick that very particular element that, um,

1299
01:12:45.175 --> 01:12:49.345
meal element maybe within the list if we know the list index

1300
01:12:49.365 --> 01:12:53.225
or so, or if we can query the, the list

1301
01:12:53.405 --> 01:12:55.545
and be able to pick it, process it,

1302
01:12:56.005 --> 01:12:59.545
and just bunch of talk into, um, what we need

1303
01:12:59.545 --> 01:13:00.785
to commit later on.

1304
01:13:00.895 --> 01:13:03.625
Because I think the question you're asking is how

1305
01:13:03.625 --> 01:13:06.665
to minimize the DML operations.

1306
01:13:08.035 --> 01:13:10.895
So, uh, a actually that would be true if we want

1307
01:13:10.895 --> 01:13:12.455
to minimize DML operations.

1308
01:13:12.555 --> 01:13:15.295
Yes, we could definitely do every step that you specify.

1309
01:13:15.535 --> 01:13:16.535
I want to be clear about that.

1310
01:13:17.475 --> 01:13:21.635
And generally minimizing DML operations is a good pursuit.

1311
01:13:22.095 --> 01:13:24.195
Uh, 'cause they are very time costly

1312
01:13:24.255 --> 01:13:25.435
in terms of compute time.

1313
01:13:26.105 --> 01:13:28.435
However, uh, we're just, uh, we're kind

1314
01:13:28.435 --> 01:13:30.995
of like using our imagination here to imagine that

1315
01:13:31.905 --> 01:13:34.885
at some point in the future we run this method.

1316
01:13:35.935 --> 01:13:37.305
Like, uh, we don't know when,

1317
01:13:37.645 --> 01:13:39.265
but we would run this method here

1318
01:13:40.495 --> 01:13:42.955
and then we would run sometime later

1319
01:13:47.065 --> 01:13:48.285
and we just have this id.

1320
01:13:52.565 --> 01:13:54.305
So, uh, yes, you are correct.

1321
01:13:54.565 --> 01:13:57.185
We could do various strategies like you mentioned, to

1322
01:13:57.885 --> 01:14:02.015
not need to repro, uh, to requery

1323
01:14:02.315 --> 01:14:04.535
or do multiple DML,

1324
01:14:05.485 --> 01:14:07.185
but we're just like kind of making a separation.

1325
01:14:07.265 --> 01:14:09.145
'cause I wanna show this second point here, which is,

1326
01:14:09.415 --> 01:14:11.025
what do we actually need to query?

1327
01:14:13.775 --> 01:14:17.815
Well does meal for rehiring it? Um, excuse me.

1328
01:14:18.045 --> 01:14:20.975
Yeah, you need, you need to have some reference

1329
01:14:20.975 --> 01:14:22.175
that to be able to do it.

1330
01:14:22.435 --> 01:14:23.895
And it's a scoping thing, right?

1331
01:14:24.315 --> 01:14:26.775
Yep. I, I will need some way to find it.

1332
01:14:27.135 --> 01:14:30.015
I could use the name of the person to try and search for it,

1333
01:14:30.395 --> 01:14:33.255
or I could just have the exact id. But do I need to, it's

1334
01:14:33.255 --> 01:14:34.735
A similar query, but similar to passing a record

1335
01:14:34.915 --> 01:14:36.095
Id like to do in a flow.

1336
01:14:37.195 --> 01:14:38.215
Yep. It's very, it's,

1337
01:14:38.235 --> 01:14:39.775
it is exactly the same kind of concept.

1338
01:14:39.845 --> 01:14:41.575
Okay. We're passing a record ID in,

1339
01:14:41.905 --> 01:14:43.655
we're querying a record by that id.

1340
01:14:44.045 --> 01:14:45.215
However, do I need

1341
01:14:45.215 --> 01:14:48.015
to get these fields from my query in order to change them?

1342
01:14:49.885 --> 01:14:53.555
No. No. All right.

1343
01:14:53.555 --> 01:14:54.595
So we've got a couple different,

1344
01:14:54.685 --> 01:14:57.395
let's just run this method and see what happens.

1345
01:14:57.715 --> 01:14:59.475
'cause I think we've got a bunch of different

1346
01:15:00.005 --> 01:15:01.955
ideas about what's going on here.

1347
01:15:02.815 --> 01:15:05.675
So let's try it. Let us try it.

1348
01:15:05.935 --> 01:15:07.875
So what I'm gonna do is I'm gonna modify this so

1349
01:15:07.875 --> 01:15:12.155
that it returns my, the,

1350
01:15:12.255 --> 01:15:13.595
the meal that I cook's id.

1351
01:15:14.585 --> 01:15:16.565
So this is gonna have a return type now of ID

1352
01:15:16.955 --> 01:15:18.445
because I don't need the whole thing.

1353
01:15:18.685 --> 01:15:19.885
I just need to know the id.

1354
01:15:20.385 --> 01:15:25.045
Yep. Oh

1355
01:15:25.045 --> 01:15:26.245
wait, oopsie.

1356
01:15:27.545 --> 01:15:30.495
There we go. So this is gonna compile just fine.

1357
01:15:30.665 --> 01:15:33.975
We're gonna pass it in here. Do all this. Okay.

1358
01:15:36.905 --> 01:15:40.015
We'll do blanc. Give her number three.

1359
01:15:42.055 --> 01:15:44.075
And then we're gonna return from this a meal id.

1360
01:15:44.075 --> 01:15:45.995
So I'm gonna declare a variable of type id,

1361
01:15:46.165 --> 01:15:47.555
which is important in this case.

1362
01:15:48.335 --> 01:15:51.855
Uh, meal id. All right.

1363
01:15:52.445 --> 01:15:55.175
Meal ID is gonna be returned from this method.

1364
01:15:56.465 --> 01:15:57.805
And sometime later we're gonna pass

1365
01:15:57.805 --> 01:15:59.245
that meal ID into this method.

1366
01:16:01.095 --> 01:16:04.225
Next, I'm going to, uh, look at the final result of this

1367
01:16:04.765 --> 01:16:07.265
to see kind of what happens in between.

1368
01:16:10.645 --> 01:16:12.705
Let me get rid of my debugs that I don't need.

1369
01:16:12.825 --> 01:16:13.905
'cause they're gonna be very distracting.

1370
01:16:19.295 --> 01:16:20.965
Let's write a useful method for ourselves.

1371
01:16:24.165 --> 01:16:25.785
You can return a single S object

1372
01:16:25.785 --> 01:16:26.945
just like this from a method.

1373
01:16:27.745 --> 01:16:32.095
Uh, I'm just gonna call this query meal by id.

1374
01:16:34.885 --> 01:16:37.665
And this is just gonna return the result of a query.

1375
01:16:42.705 --> 01:16:43.705
Oh, no, no, no.

1376
01:16:44.745 --> 01:16:44.965
So

1377
01:16:49.625 --> 01:16:53.065
When I'm, uh, returning this, like in this way

1378
01:16:53.065 --> 01:16:54.025
that you can see right here,

1379
01:16:58.515 --> 01:17:01.155
I am actually not declaring my data type

1380
01:17:02.115 --> 01:17:05.165
because I know that this

1381
01:17:05.725 --> 01:17:07.885
brackets right here returns a list.

1382
01:17:08.465 --> 01:17:11.285
So I, I actually wouldn't want to say this

1383
01:17:11.505 --> 01:17:13.645
unless I knew I were gonna get one back

1384
01:17:13.955 --> 01:17:15.085
because I don't know.

1385
01:17:15.105 --> 01:17:18.315
I'm gonna get one back. Make a list

1386
01:17:21.455 --> 01:17:22.995
and I'm gonna select all my fields too.

1387
01:17:23.155 --> 01:17:24.435
'cause I want to take a look at my fields.

1388
01:17:25.305 --> 01:17:27.435
This may give away what I was talking about here in a

1389
01:17:27.435 --> 01:17:31.415
second, but I'm gonna query the combo field.

1390
01:17:31.435 --> 01:17:33.935
And I would also like to take a look at the order up value

1391
01:17:34.475 --> 01:17:36.615
to see is this order up or not?

1392
01:17:43.065 --> 01:17:44.745
I want to print it out between each step

1393
01:17:44.765 --> 01:17:46.465
so we can see kind of what's going on with it.

1394
01:17:48.205 --> 01:17:49.265
Uh, did you need a

1395
01:17:49.265 --> 01:17:50.345
Comm after the id?

1396
01:17:52.345 --> 01:17:56.055
Where at? I do. Thank you.

1397
01:17:59.915 --> 01:18:03.015
We have this method that I just wrote called Meal Factory

1398
01:18:03.505 --> 01:18:07.535
Query Meal by id, which returns a meal for a given id.

1399
01:18:07.895 --> 01:18:09.215
I will put in this.

1400
01:18:12.195 --> 01:18:14.495
Now this method returns me that S object

1401
01:18:14.955 --> 01:18:17.935
and this debug is gonna debug the values of that S object.

1402
01:18:18.785 --> 01:18:20.845
And I'm just doing this so we can see what happens

1403
01:18:20.845 --> 01:18:22.205
between running each method.

1404
01:18:24.875 --> 01:18:27.055
So let's save all our work and deploy it.

1405
01:18:27.205 --> 01:18:28.535
Make sure I didn't make any mistakes.

1406
01:18:30.125 --> 01:18:31.165
I didn't make any mistakes.

1407
01:18:35.995 --> 01:18:38.255
And now let's run our, uh, process here.

1408
01:18:47.435 --> 01:18:48.615
All right, so this is a learning moment.

1409
01:18:48.815 --> 01:18:49.855
I made a mistake somewhere.

1410
01:18:50.155 --> 01:18:53.455
It says System DML, exception insert failed,

1411
01:18:53.465 --> 01:18:56.255
first exception on row zero with id, blah blah, blah.

1412
01:18:56.545 --> 01:19:00.455
First error. Invalid field for insert or update.

1413
01:19:00.635 --> 01:19:03.335
Cannot specify ID in an insert call.

1414
01:19:04.615 --> 01:19:07.545
Well, if we look at our runtime error,

1415
01:19:07.955 --> 01:19:10.025
it'll probably tell us where that happened.

1416
01:19:15.735 --> 01:19:17.075
If you already have the id,

1417
01:19:17.095 --> 01:19:19.115
why would you insert? Why wouldn't you update?

1418
01:19:19.825 --> 01:19:21.595
Exactly. I think I made a mistake somewhere.

1419
01:19:21.615 --> 01:19:23.115
So we can look at our error message.

1420
01:19:23.455 --> 01:19:25.355
Go to line 19 to investigate.

1421
01:19:27.795 --> 01:19:30.455
And that is line 19 in this class.

1422
01:19:32.285 --> 01:19:34.135
What am I doing this wrong at?

1423
01:19:39.345 --> 01:19:43.685
Oh, there we go.

1424
01:19:45.725 --> 01:19:50.095
And I also need to correct this. Okay, perfect.

1425
01:19:50.755 --> 01:19:52.575
Now we'll just save and deploy again

1426
01:19:56.255 --> 01:19:58.395
and we'll go back over here and try to run it.

1427
01:19:59.025 --> 01:20:01.495
Cool. Now we can actually get to what we wanted to look at.

1428
01:20:01.925 --> 01:20:03.055
That was a genuine mistake.

1429
01:20:05.795 --> 01:20:07.055
So my code starts here.

1430
01:20:07.475 --> 01:20:11.645
This is my meal as I query initially, uh, it's

1431
01:20:12.715 --> 01:20:14.985
order up is true and it's combo is three.

1432
01:20:16.195 --> 01:20:19.335
And then after I run the second method,

1433
01:20:20.345 --> 01:20:22.835
it's order up is false and the combo is two.

1434
01:20:24.495 --> 01:20:28.395
If we go look at the code here, I did not need

1435
01:20:28.395 --> 01:20:31.435
to query these fields in order to modify them.

1436
01:20:32.175 --> 01:20:34.745
Okay? This is really important.

1437
01:20:37.485 --> 01:20:42.305
We don't need to always run a query if we know exactly

1438
01:20:42.305 --> 01:20:45.385
what we're gonna change because this gets even simpler.

1439
01:20:46.625 --> 01:20:51.455
I already know the id. Do I need to run a query at all?

1440
01:20:54.465 --> 01:20:56.285
Is that because when you have access to the id,

1441
01:20:56.285 --> 01:20:57.765
you have access to all its fields?

1442
01:20:59.065 --> 01:21:01.645
Yes. Well, I, I know what my object looks like.

1443
01:21:02.005 --> 01:21:06.405
I, uh, the schema knows what properties

1444
01:21:06.405 --> 01:21:07.685
and fields are on my object.

1445
01:21:08.065 --> 01:21:10.085
So if I were to define this differently,

1446
01:21:10.445 --> 01:21:12.805
I could say I have meal for re firing.

1447
01:21:12.965 --> 01:21:15.965
I know what its ID is. I can create a new meal.

1448
01:21:17.085 --> 01:21:20.565
I can specify that the ID is equal to meal id.

1449
01:21:22.375 --> 01:21:24.215
I do not know what the name of this object is

1450
01:21:24.295 --> 01:21:27.015
'cause I didn't query it, but I know what its ID is.

1451
01:21:27.935 --> 01:21:29.335
I know that it has this field

1452
01:21:29.915 --> 01:21:32.535
and I know that it has this field because I know it's type,

1453
01:21:34.505 --> 01:21:36.235
because I have this information.

1454
01:21:36.635 --> 01:21:38.555
I don't need to re-query it in this case.

1455
01:21:38.795 --> 01:21:40.555
'cause I just want to make these two updates.

1456
01:21:41.015 --> 01:21:43.115
And I don't care about the other fields on the record.

1457
01:21:43.655 --> 01:21:46.875
If I needed to query the record to read some value to know

1458
01:21:46.875 --> 01:21:49.195
that, like, oh, it's BLANCHE'S record, I need

1459
01:21:49.435 --> 01:21:50.675
to do something different with it.

1460
01:21:50.775 --> 01:21:55.385
Or Oh, it was a number two, A number two always needs

1461
01:21:55.385 --> 01:21:56.425
to become a number four

1462
01:21:56.485 --> 01:22:00.025
or do some other logic, then I would have to query.

1463
01:22:00.485 --> 01:22:02.585
But I really wanna stress this,

1464
01:22:03.215 --> 01:22:04.985
this idea is critically important

1465
01:22:04.985 --> 01:22:07.625
to the identity of the object.

1466
01:22:07.645 --> 01:22:09.825
So, um, question, um, you can have the,

1467
01:22:10.405 --> 01:22:12.105
you can have more than one, um, instances

1468
01:22:12.215 --> 01:22:13.345
with the same id, right?

1469
01:22:13.525 --> 01:22:14.525
And it wouldn't

1470
01:22:15.205 --> 01:22:16.665
No, no, no, no.

1471
01:22:16.965 --> 01:22:19.905
So I can, I can do, actually, let me answer your question.

1472
01:22:19.925 --> 01:22:24.245
You are correct. I could do this twice other meal

1473
01:22:24.475 --> 01:22:26.285
with the same id,

1474
01:22:28.665 --> 01:22:31.325
but whichever statement I call last, like if I were

1475
01:22:31.325 --> 01:22:33.045
to do two different updates to this one

1476
01:22:33.045 --> 01:22:34.445
and they were both the same, id,

1477
01:22:34.515 --> 01:22:37.285
whichever one I call last is gonna take effect.

1478
01:22:38.385 --> 01:22:40.525
So I could say other meal with the same,

1479
01:22:40.705 --> 01:22:42.285
ID also do an update to it

1480
01:22:44.595 --> 01:22:47.885
and I could say it's combo is now gonna be four.

1481
01:22:48.615 --> 01:22:49.515
And then do update.

1482
01:22:53.405 --> 01:22:56.055
This is going to, uh, update the same object twice

1483
01:22:56.245 --> 01:22:59.495
because it's referred to specifically by this id,

1484
01:23:00.285 --> 01:23:02.985
it is always going to go to update that object.

1485
01:23:03.425 --> 01:23:07.605
'cause by default update says, what's the idea

1486
01:23:07.605 --> 01:23:08.685
of the record I'm updating.

1487
01:23:09.035 --> 01:23:10.565
Okay, I found it in the system.

1488
01:23:11.075 --> 01:23:12.765
Here is the new values that I have.

1489
01:23:13.585 --> 01:23:15.525
It doesn't know about any of the other values

1490
01:23:15.835 --> 01:23:16.925
that are not in memory.

1491
01:23:19.865 --> 01:23:21.405
It won't overwrite them as blank,

1492
01:23:22.305 --> 01:23:23.845
but it won't know about them.

1493
01:23:25.605 --> 01:23:28.025
So I'm, I'm saying but, but it won't give you an error.

1494
01:23:28.895 --> 01:23:30.305
Nope. This is not gonna gimme an error. Okay.

1495
01:23:30.305 --> 01:23:31.185
Let's, let's check it out.

1496
01:23:36.465 --> 01:23:38.925
We can look at it actually between each state here.

1497
01:23:39.095 --> 01:23:40.925
We're gonna run our method here

1498
01:23:45.985 --> 01:23:46.765
in between this

1499
01:23:52.125 --> 01:23:52.945
and we'll see that.

1500
01:23:52.945 --> 01:23:54.585
Can we get like a locked row error?

1501
01:23:56.045 --> 01:23:57.945
So we'll talk about roll lock in just a second.

1502
01:23:58.825 --> 01:24:01.865
I, I, I am very intimately familiar with Roblox

1503
01:24:02.365 --> 01:24:04.675
and, uh, we will discuss

1504
01:24:05.215 --> 01:24:06.675
why we're not gonna get a role lock here.

1505
01:24:10.935 --> 01:24:12.475
All right, so let's prove this out first.

1506
01:24:13.055 --> 01:24:15.355
The idea is what matters When we do an update,

1507
01:24:16.455 --> 01:24:17.475
the idea is what matters.

1508
01:24:17.475 --> 01:24:21.195
When we do a query query, I run, I I'm gonna run my process.

1509
01:24:21.765 --> 01:24:22.755
Let's run it one more time.

1510
01:24:26.965 --> 01:24:31.705
Okay, let's look at each stage of this here.

1511
01:24:31.725 --> 01:24:33.985
So I'm created it, it's a combo number three

1512
01:24:33.985 --> 01:24:35.945
to start it's order up is true.

1513
01:24:37.055 --> 01:24:41.715
Then I update it in my other method, in my refire method.

1514
01:24:42.705 --> 01:24:45.045
Inside the refire method, I set it to a two.

1515
01:24:45.745 --> 01:24:47.005
And I say order up false.

1516
01:24:48.505 --> 01:24:51.355
Here I do it one last time though, I say

1517
01:24:52.775 --> 01:24:53.915
change it to a four.

1518
01:24:54.125 --> 01:24:57.755
Order up false. This is always the same meal ID

1519
01:24:57.775 --> 01:24:59.395
and it's always the same object.

1520
01:25:02.645 --> 01:25:04.985
So it said similar, much like merging duplicate records.

1521
01:25:05.325 --> 01:25:08.735
You pick which one wins which field. It's not,

1522
01:25:09.085 --> 01:25:11.895
It's not really, I guess Yeah,

1523
01:25:11.915 --> 01:25:14.055
you could, you could say that.

1524
01:25:14.055 --> 01:25:15.495
Yeah. So basically,

1525
01:25:15.765 --> 01:25:18.535
because it doesn't know what value this already has,

1526
01:25:18.795 --> 01:25:19.895
I'm just overriding it.

1527
01:25:20.115 --> 01:25:23.215
So whatever I say is right, is right. Okay.

1528
01:25:23.315 --> 01:25:27.015
Um, uh, uh, in the code, if I wanted to make sure

1529
01:25:27.015 --> 01:25:28.495
that I don't overwrite the value,

1530
01:25:29.505 --> 01:25:31.515
then I could query my record, check

1531
01:25:31.515 --> 01:25:33.955
what the existing value is with like an if statement

1532
01:25:34.535 --> 01:25:37.915
and then decide if I want to put in a new value or not.

1533
01:25:38.905 --> 01:25:42.555
Okay. That would be one way to, uh, avoid this.

1534
01:25:43.175 --> 01:25:47.275
But doing DML in Apex, I really wanna point out

1535
01:25:48.035 --> 01:25:50.235
whatever record is in memory is

1536
01:25:50.235 --> 01:25:52.475
what gets written to the database. Mm-hmm.

1537
01:25:53.145 --> 01:25:55.955
Wait, I have a, oh wait. Um, you have already a question.

1538
01:25:56.565 --> 01:25:59.105
That's okay. No, I was gonna say, um, when it comes to,

1539
01:25:59.285 --> 01:26:02.765
you just said, um, the if statement, um,

1540
01:26:03.515 --> 01:26:06.295
we have an instance Wouldn, don't we just, um, um, use

1541
01:26:06.295 --> 01:26:08.735
that instance and check with a in statement like

1542
01:26:09.485 --> 01:26:13.775
meal W when I just say, um, if meal for referencing

1543
01:26:14.515 --> 01:26:17.055
equals this, WW would they still be able

1544
01:26:17.055 --> 01:26:20.695
to check without querying? If you know, I mean, so

1545
01:26:21.275 --> 01:26:22.275
I, I know what you're saying. So

1546
01:26:22.275 --> 01:26:26.035
you're saying if I don't query it, can I check if meal

1547
01:26:26.615 --> 01:26:30.315
for a firing equals equals, uh,

1548
01:26:30.455 --> 01:26:34.795
or wait name equals, uh, blanche

1549
01:26:35.215 --> 01:26:37.275
or for example,

1550
01:26:37.905 --> 01:26:41.575
Yeah, It doesn't have this value right now.

1551
01:26:44.005 --> 01:26:45.825
It only because I created it this

1552
01:26:45.825 --> 01:26:46.985
way, it doesn't know the value.

1553
01:26:47.165 --> 01:26:48.825
In this case, I would need to query it

1554
01:26:49.445 --> 01:26:52.785
if in the same way I wanted to check if the order up

1555
01:26:54.265 --> 01:26:56.045
value was true.

1556
01:26:56.865 --> 01:27:00.795
If order up is true

1557
01:27:02.295 --> 01:27:06.565
and I don't want to do the refire, or sorry if it's false

1558
01:27:06.705 --> 01:27:07.965
and I don't wanna do the refire

1559
01:27:07.965 --> 01:27:10.675
or change it, then I can just quit.

1560
01:27:10.675 --> 01:27:14.685
Right? But I don't have this value of order up

1561
01:27:14.755 --> 01:27:18.085
because I just told it what the record looks like right now.

1562
01:27:18.415 --> 01:27:21.005
Right now, if I were to take a look at this in the

1563
01:27:21.525 --> 01:27:24.405
computer's mind, the computer only knows the ID

1564
01:27:24.425 --> 01:27:28.335
and the type it says this is an object of type meal

1565
01:27:28.565 --> 01:27:31.975
that has this id because you told me it has this id.

1566
01:27:32.995 --> 01:27:36.055
Unless I go and query the database, I have no idea

1567
01:27:37.425 --> 01:27:40.375
about the value on that record.

1568
01:27:41.015 --> 01:27:43.885
I have to go and explicitly look for that. Okay.

1569
01:27:43.885 --> 01:27:46.725
If I define it up here, then I do know if I were to say

1570
01:27:47.545 --> 01:27:50.205
equals true, then I know because I just told it what it is.

1571
01:27:50.785 --> 01:27:53.925
But if I don't tell it, it's gotta go be queried.

1572
01:27:55.175 --> 01:27:57.705
Okay. Got It. Does that answer your question?

1573
01:27:58.255 --> 01:28:00.185
Yeah. Got it. Okay. Cool.

1574
01:28:00.885 --> 01:28:02.185
Uh, may, what is your question?

1575
01:28:04.565 --> 01:28:08.315
So when we were, um, when you debugged it

1576
01:28:08.315 --> 01:28:11.275
and then it overwrote everything to the last statement,

1577
01:28:11.735 --> 01:28:15.205
that's only because we said update, right?

1578
01:28:15.345 --> 01:28:16.405
Yep. Okay.

1579
01:28:17.025 --> 01:28:20.165
And I, I specify what I'm changing. Oh,

1580
01:28:20.695 --> 01:28:21.695
Thank You. So if you look

1581
01:28:21.695 --> 01:28:24.165
here, like I declared two separate variables,

1582
01:28:24.165 --> 01:28:25.245
both with the same id,

1583
01:28:25.465 --> 01:28:27.605
but I did not overwrite the order up value.

1584
01:28:29.885 --> 01:28:31.765
I did overwrite the combo number though.

1585
01:28:34.405 --> 01:28:37.385
So, um, what, what I'm really trying

1586
01:28:37.385 --> 01:28:39.825
to get at here is each update is

1587
01:28:42.795 --> 01:28:46.355
very, like you're, your querying

1588
01:28:46.355 --> 01:28:50.955
and your update are two separate

1589
01:28:51.085 --> 01:28:52.435
operations that you need

1590
01:28:52.435 --> 01:28:54.315
to think about when you do each one.

1591
01:28:55.525 --> 01:28:58.505
If I'm querying, I want to query for exactly the fields

1592
01:28:58.505 --> 01:29:02.775
that I need and I want to check them as necessary

1593
01:29:02.995 --> 01:29:04.535
before I change their values.

1594
01:29:05.515 --> 01:29:07.375
If I am creating a new record

1595
01:29:08.115 --> 01:29:11.295
or updating an existing record that I know the idea of,

1596
01:29:12.015 --> 01:29:16.715
I want to be sure that if I do need to query it, I know

1597
01:29:16.715 --> 01:29:19.435
what I'm querying for and I know why I'm querying for it.

1598
01:29:19.435 --> 01:29:21.835
Otherwise, I'll just do the updates that I need to do.

1599
01:29:23.325 --> 01:29:26.105
But IDs are very, very valuable

1600
01:29:26.175 --> 01:29:28.225
because they can be used for

1601
01:29:29.845 --> 01:29:31.485
updating a record without querying it.

1602
01:29:31.635 --> 01:29:35.125
They can be used to query a specific record Exactly.

1603
01:29:35.535 --> 01:29:38.745
Which can be very, very useful because

1604
01:29:38.745 --> 01:29:41.825
otherwise we are kind of stumbling around being like,

1605
01:29:41.845 --> 01:29:44.945
I'm looking for a record, it's this tall, uh,

1606
01:29:45.095 --> 01:29:50.035
it's this color and it's this shape that,

1607
01:29:50.105 --> 01:29:51.355
that doesn't tell me anything.

1608
01:29:51.615 --> 01:29:54.195
Uh, I, I would much rather know exactly the records

1609
01:29:54.835 --> 01:29:56.275
specific name, which is the id.

1610
01:29:59.035 --> 01:30:00.575
So what I really am trying

1611
01:30:00.575 --> 01:30:03.695
to drive home in this lesson is when we're using queries

1612
01:30:03.835 --> 01:30:06.495
and when we're using DML statements, the ID

1613
01:30:07.515 --> 01:30:09.015
is very, very important.

1614
01:30:10.155 --> 01:30:12.895
You can, um, let's talk about roll lock.

1615
01:30:13.135 --> 01:30:14.375
Actually before we wrap up.

1616
01:30:14.955 --> 01:30:16.655
So Jason had said something about,

1617
01:30:17.105 --> 01:30:19.675
because we're doing an update here and an update here,

1618
01:30:19.815 --> 01:30:21.475
and they're both on the same id,

1619
01:30:21.995 --> 01:30:23.395
wouldn't you get a roll lock?

1620
01:30:24.795 --> 01:30:28.635
A roll lock happens when, uh, our code is saying,

1621
01:30:28.915 --> 01:30:31.155
I would like to go update this record, pull it out,

1622
01:30:31.155 --> 01:30:32.475
pull it off the shelf for me,

1623
01:30:33.625 --> 01:30:35.285
and the computer pulls it off the shelf

1624
01:30:35.585 --> 01:30:37.725
and it then writes something in it and puts it back.

1625
01:30:38.415 --> 01:30:42.725
Let's say somebody else comes along while that computer has

1626
01:30:42.875 --> 01:30:45.165
that book off the shelf or that record off the shelf,

1627
01:30:45.465 --> 01:30:47.405
and it says, I would like to update that one.

1628
01:30:47.445 --> 01:30:50.165
I know it's right there. I know its id, I know its name.

1629
01:30:50.425 --> 01:30:51.725
I'm gonna go pull it off the shelf,

1630
01:30:51.945 --> 01:30:52.965
but it's not on the shelf.

1631
01:30:53.745 --> 01:30:56.205
That's because another record is writing to it right now.

1632
01:30:56.385 --> 01:31:00.325
It locks the record while this process is writing it.

1633
01:31:00.975 --> 01:31:02.805
Let's say that that's this process right here.

1634
01:31:03.065 --> 01:31:05.205
Our record is gonna get locked right here while it's

1635
01:31:05.365 --> 01:31:07.845
updating so that nobody else can interrupt my update.

1636
01:31:08.985 --> 01:31:10.455
Salesforce is very greedy.

1637
01:31:11.155 --> 01:31:13.935
It doesn't want more than one process modifying a record at

1638
01:31:13.935 --> 01:31:16.855
the same time, however, um,

1639
01:31:17.725 --> 01:31:20.215
because code runs from top to bottom in order,

1640
01:31:21.195 --> 01:31:23.495
the record's gonna be locked while this is happening on line

1641
01:31:23.495 --> 01:31:26.565
42, it releases the lock.

1642
01:31:27.565 --> 01:31:30.835
As soon as it's done updating, then it goes

1643
01:31:31.255 --> 01:31:32.355
to whatever code is next.

1644
01:31:33.545 --> 01:31:36.645
So as soon as this statement is done, the lock is released.

1645
01:31:37.555 --> 01:31:40.645
Generally speaking, roughly speaking, um,

1646
01:31:41.105 --> 01:31:42.645
so when we get down to this one right here,

1647
01:31:43.405 --> 01:31:46.465
if I'm modifying the same record, my lock is released here

1648
01:31:46.765 --> 01:31:47.985
and it locks again here.

1649
01:31:48.765 --> 01:31:52.705
The only way you can run into a record lock is if I had, uh,

1650
01:31:52.765 --> 01:31:55.665
two Apex classes running at the same time

1651
01:31:56.765 --> 01:31:59.245
and they were both trying to update the same record.

1652
01:32:00.485 --> 01:32:03.085
I cannot easily demonstrate this to you

1653
01:32:03.115 --> 01:32:06.725
because Salesforce is really well designed compared

1654
01:32:06.725 --> 01:32:08.285
to a lot of databases.

1655
01:32:08.555 --> 01:32:12.245
They have done a great job of, uh, well,

1656
01:32:12.245 --> 01:32:13.925
most modern databases do a good job of this,

1657
01:32:13.985 --> 01:32:17.765
of making the read write consistency very good.

1658
01:32:18.195 --> 01:32:20.485
What I mean by read write consistency is

1659
01:32:21.465 --> 01:32:25.285
if I call update right here, I I'm very positive

1660
01:32:25.285 --> 01:32:27.765
that my update will make it in when it's supposed to.

1661
01:32:28.225 --> 01:32:29.965
It, it doesn't have a lot of race conditions.

1662
01:32:30.705 --> 01:32:32.445
So whoever gets there first will get

1663
01:32:32.445 --> 01:32:35.225
to write their changes and move on.

1664
01:32:36.325 --> 01:32:39.055
Um, So if you had,

1665
01:32:39.315 --> 01:32:42.095
if the Apex class was running and someone mm-hmm.

1666
01:32:42.315 --> 01:32:45.855
In the UI actually opened that exact same record mm-hmm.

1667
01:32:45.855 --> 01:32:48.135
They can't do anything until your code finishes,

1668
01:32:48.155 --> 01:32:50.655
but they could override your code by making a UI change?

1669
01:32:51.245 --> 01:32:53.335
They sure could. And then it would be down to, uh,

1670
01:32:53.665 --> 01:32:57.495
whose code down to like the microsecond saves first.

1671
01:32:58.005 --> 01:33:00.135
Okay, well I, and if they are close enough,

1672
01:33:00.195 --> 01:33:01.255
you'll get a roll lock.

1673
01:33:01.765 --> 01:33:02.895
Yeah. Okay. I mean,

1674
01:33:02.895 --> 01:33:04.295
I had gotten them before, that's why I was curious.

1675
01:33:04.595 --> 01:33:06.055
Yep. You definitely can do it.

1676
01:33:06.195 --> 01:33:09.615
Um, and, and the longer you are holding a record in its

1677
01:33:09.615 --> 01:33:11.335
update updating state

1678
01:33:11.335 --> 01:33:14.455
or inserting state, like if you have a lot of automation on

1679
01:33:14.455 --> 01:33:17.055
that record, the more likely it is you get a row lock

1680
01:33:17.055 --> 01:33:21.175
because it cannot release that lock until all the triggers

1681
01:33:21.315 --> 01:33:23.255
and automation have run. Okay.

1682
01:33:23.395 --> 01:33:24.415
It does not release the lock.

1683
01:33:24.415 --> 01:33:27.495
I've got a lock, I've got a rule lock while

1684
01:33:27.495 --> 01:33:28.655
doing one pollution.

1685
01:33:28.925 --> 01:33:33.415
Many times actually, for example, if say your processes

1686
01:33:34.245 --> 01:33:36.535
have multiple traits mm-hmm.

1687
01:33:36.665 --> 01:33:39.855
While maybe you're updating, you know, like for example,

1688
01:33:39.855 --> 01:33:43.455
you're updating an opportunity Yep.

1689
01:33:43.565 --> 01:33:46.135
That, um, like maybe you're update updating,

1690
01:33:46.795 --> 01:33:51.055
say five opportunities that is referencing one contact.

1691
01:33:52.155 --> 01:33:54.215
So in that situation, maybe

1692
01:33:55.345 --> 01:33:58.135
those five are being updated at the same time.

1693
01:33:58.515 --> 01:34:02.055
Mm-hmm. And then each of them meet the contact id.

1694
01:34:02.595 --> 01:34:06.855
So it's kind of close a rule lock, um, error if

1695
01:34:07.125 --> 01:34:08.255
that situation happens.

1696
01:34:08.835 --> 01:34:11.775
But it's still a single one. It's still one process.

1697
01:34:12.435 --> 01:34:14.055
So I just thought I should, you know,

1698
01:34:14.635 --> 01:34:16.295
You, you can cause that to happen.

1699
01:34:16.555 --> 01:34:20.215
Yes, that can happen depending on how the code is written.

1700
01:34:21.035 --> 01:34:25.855
If, uh, if you're running, uh,

1701
01:34:25.885 --> 01:34:29.695
more than 200 records through a trigger

1702
01:34:30.115 --> 01:34:34.135
and they are all parented to the same parent record

1703
01:34:34.355 --> 01:34:36.935
and they all update the parent record the way

1704
01:34:36.935 --> 01:34:38.615
that triggers happen, um,

1705
01:34:38.625 --> 01:34:40.455
especially if there's anything asynchronous.

1706
01:34:40.615 --> 01:34:42.215
I, I don't know the specifics of your scenario,

1707
01:34:42.595 --> 01:34:45.215
but there are a lot of things that can create Rolex

1708
01:34:46.115 --> 01:34:50.265
if you are running at a higher scale.

1709
01:34:50.415 --> 01:34:54.465
Just because if any of those children

1710
01:34:54.725 --> 01:34:57.685
or any of those, uh, records tries to go

1711
01:34:57.685 --> 01:35:00.605
and update that same record, they could run into a rollout

1712
01:35:00.605 --> 01:35:03.445
and it's much more likely when they're all, uh,

1713
01:35:03.765 --> 01:35:04.765
referencing up to the same one

1714
01:35:04.765 --> 01:35:06.445
and all trying to make the same change to it.

1715
01:35:07.085 --> 01:35:08.685
I don't know the specifics of your scenario,

1716
01:35:08.825 --> 01:35:11.525
but like generally speaking, well-written code

1717
01:35:11.525 --> 01:35:13.165
that is not using master detail,

1718
01:35:14.185 --> 01:35:16.325
you're not gonna run into Roblox

1719
01:35:18.935 --> 01:35:20.075
if you have a lot of automations.

1720
01:35:20.075 --> 01:35:22.755
It's much more likely though, like heavy automation

1721
01:35:23.545 --> 01:35:25.455
means your record is locked for longer.

1722
01:35:25.755 --> 01:35:28.455
But in general, Salesforce does a great job

1723
01:35:28.455 --> 01:35:30.615
of preventing the role lock in the background.

1724
01:35:31.085 --> 01:35:34.655
When you call this update statement, it will try 10 times

1725
01:35:35.875 --> 01:35:38.735
to complete this update if it encounters a row lock

1726
01:35:38.735 --> 01:35:40.215
before it throws the exception.

1727
01:35:41.075 --> 01:35:44.415
So it'll try once fail silently.

1728
01:35:44.785 --> 01:35:48.775
It'll try again, fail silently again, fail silently up

1729
01:35:48.775 --> 01:35:51.895
to 10 times before it throws the, uh, unable to lock,

1730
01:35:52.355 --> 01:35:54.055
uh, row error.

1731
01:35:56.465 --> 01:35:58.565
So is there any best practices for that?

1732
01:35:58.625 --> 01:36:00.045
So like if you have an integration

1733
01:36:00.045 --> 01:36:02.245
where an external user is updating a record

1734
01:36:02.745 --> 01:36:04.165
and you have automations already

1735
01:36:04.165 --> 01:36:05.725
behind the scenes to prevent that.

1736
01:36:07.675 --> 01:36:09.615
So it's, uh, with integrations

1737
01:36:09.615 --> 01:36:10.775
it gets a little more complicated.

1738
01:36:10.995 --> 01:36:12.895
So like, let's say I have, uh, users

1739
01:36:12.895 --> 01:36:13.975
that are updating a record

1740
01:36:14.155 --> 01:36:15.415
and I have an external service

1741
01:36:15.445 --> 01:36:17.855
that might update the same record, um,

1742
01:36:18.975 --> 01:36:20.035
or the same list, right?

1743
01:36:20.035 --> 01:36:23.075
Community cloud for example. Yes. If I, okay,

1744
01:36:23.735 --> 01:36:25.755
So let's say that that's the case there.

1745
01:36:25.765 --> 01:36:27.475
There are, if you truly are going

1746
01:36:27.475 --> 01:36:31.715
to run into like a race condition, what you can do is

1747
01:36:32.835 --> 01:36:35.395
a common integration pattern would be like a staging table.

1748
01:36:35.795 --> 01:36:38.915
A staging table would be, there are a number of updates

1749
01:36:38.915 --> 01:36:41.315
that get queued by external systems mm-hmm.

1750
01:36:41.395 --> 01:36:45.495
That are loaded in asynchronously at a

1751
01:36:45.595 --> 01:36:47.775
and they will like basically attempt to constantly

1752
01:36:48.445 --> 01:36:49.615
integrate their changes.

1753
01:36:51.245 --> 01:36:52.945
But like, whenever you have like a user

1754
01:36:53.205 --> 01:36:55.345
and a system both trying to commit changes

1755
01:36:55.445 --> 01:36:58.585
to the same record, there's never an easy, uh,

1756
01:36:59.535 --> 01:37:01.545
there's never one answer for that kind of problem.

1757
01:37:02.055 --> 01:37:06.965
Okay? You always have to look at who should

1758
01:37:07.635 --> 01:37:10.565
have the authority to have the final state of this record.

1759
01:37:11.225 --> 01:37:13.845
And a lot of the, the questions around that

1760
01:37:14.665 --> 01:37:16.005
are business related questions.

1761
01:37:16.005 --> 01:37:18.885
Like, you know, who should have the final say

1762
01:37:19.065 --> 01:37:21.245
or how do I know when this is done updating?

1763
01:37:21.765 --> 01:37:23.245
A lot of times there are records

1764
01:37:23.275 --> 01:37:24.885
that just are updating for a long time.

1765
01:37:25.265 --> 01:37:28.125
Quotes, uh, if you're working on quotes, a lot of times

1766
01:37:28.785 --> 01:37:30.325
you're not gonna update the same quote.

1767
01:37:30.385 --> 01:37:32.685
You're gonna clone the quote, issue a new quote

1768
01:37:32.685 --> 01:37:34.885
with changes, you know,

1769
01:37:35.225 --> 01:37:37.325
and then maybe when that one issues, it'll go take it

1770
01:37:37.325 --> 01:37:38.885
to an external system to validate

1771
01:37:39.145 --> 01:37:41.765
and that external system will say, this quote's not valid.

1772
01:37:41.825 --> 01:37:43.285
So you don't have this window available.

1773
01:37:43.625 --> 01:37:46.445
And then it will clone that quote, insert the new one

1774
01:37:46.755 --> 01:37:50.165
with a to-do and the do will say, replace this window.

1775
01:37:50.325 --> 01:37:51.765
I generated a new quote for you.

1776
01:37:52.305 --> 01:37:54.445
And it will go back and forth in that way purely

1777
01:37:54.505 --> 01:37:55.925
to avoid the road lock problem.

1778
01:37:56.775 --> 01:37:58.445
There are all sorts of ways to do this,

1779
01:37:58.785 --> 01:38:01.645
and it just depends on your scale, your data model,

1780
01:38:02.065 --> 01:38:05.165
and uh, I guess the overall opinionation

1781
01:38:05.165 --> 01:38:07.565
of the business towards eventual consistency.

1782
01:38:07.915 --> 01:38:11.125
When is my record settled? When is my record synced up?

1783
01:38:12.305 --> 01:38:15.785
It's a really hard question, uh, to say like

1784
01:38:15.785 --> 01:38:16.905
what the ultimate answer is,

1785
01:38:17.905 --> 01:38:21.205
but yes, that is a very common way you get ro uh, Rolex

1786
01:38:21.265 --> 01:38:23.005
and I literally worked, uh,

1787
01:38:23.005 --> 01:38:24.285
encountered that problem today at work.

1788
01:38:24.665 --> 01:38:27.165
Um, external system causing Roblox

1789
01:38:27.965 --> 01:38:29.845
updating records one at a time, other

1790
01:38:29.845 --> 01:38:31.205
people updating those same records.

1791
01:38:33.075 --> 01:38:36.325
Okay. Very difficult problem, but uh, it can be solved.

1792
01:38:36.955 --> 01:38:38.365
Yeah, you just gotta find the right pattern.

1793
01:38:38.945 --> 01:38:40.765
Record trigger flows, do it too.

1794
01:38:41.425 --> 01:38:43.445
Oh yeah. Really bad. Really bad.

1795
01:38:43.465 --> 01:38:46.565
You shouldn't use record trigger flows anyway, uh,

1796
01:38:46.635 --> 01:38:48.765
last thing I will say I wanted to point out,

1797
01:38:49.565 --> 01:38:52.085
remember this and this.

1798
01:38:53.025 --> 01:38:55.005
Mm-hmm. Let's talk about this real quick.

1799
01:38:56.295 --> 01:39:01.025
Can do it together. So

1800
01:39:01.885 --> 01:39:04.175
this is kind of bad right now for a couple reasons.

1801
01:39:04.755 --> 01:39:06.655
I'm doing 2D ML operations. Mm-hmm.

1802
01:39:06.735 --> 01:39:07.815
And remember, queries

1803
01:39:07.815 --> 01:39:09.535
and d ml are the most time consuming

1804
01:39:10.045 --> 01:39:11.815
slow operations you can do in your code.

1805
01:39:11.915 --> 01:39:13.655
So it's gotta go call the database.

1806
01:39:14.045 --> 01:39:17.135
It's gotta get the data back either way, right?

1807
01:39:17.445 --> 01:39:18.815
It's gonna go pull a whole bunch

1808
01:39:18.815 --> 01:39:19.895
of data back if it's a query

1809
01:39:19.955 --> 01:39:21.655
or it's going to go submit some data

1810
01:39:21.715 --> 01:39:23.695
and give you back a yes or no.

1811
01:39:23.775 --> 01:39:28.145
I did it right. Um, because that takes so much time.

1812
01:39:28.595 --> 01:39:30.865
Wanna reduce the trips we make to the database

1813
01:39:32.005 --> 01:39:36.125
whenever possible for a singular S object type.

1814
01:39:36.405 --> 01:39:38.205
I will even give you more specific advice.

1815
01:39:38.985 --> 01:39:40.245
You should group those together.

1816
01:39:41.465 --> 01:39:45.045
So what I mean by that is if we're gonna put two sides in

1817
01:39:45.105 --> 01:39:46.445
for our orders, it doesn't

1818
01:39:46.445 --> 01:39:47.565
matter if the sides are different.

1819
01:39:47.565 --> 01:39:50.645
They're the same type because they're the same type.

1820
01:39:51.225 --> 01:39:53.685
It is often advisable to just do something like this

1821
01:39:53.685 --> 01:39:55.085
where you make a list of sides,

1822
01:39:59.355 --> 01:40:03.475
create them both, and by create them, I know

1823
01:40:03.475 --> 01:40:06.235
that create in flows means something very specific.

1824
01:40:06.255 --> 01:40:09.005
It means insert, I'm not gonna use that terminology.

1825
01:40:09.105 --> 01:40:11.765
Insert means insert, create means I'm just gonna

1826
01:40:11.835 --> 01:40:13.165
instantiate my variable.

1827
01:40:13.545 --> 01:40:15.765
So sides is my list.

1828
01:40:16.385 --> 01:40:20.935
I'm gonna add my created side to my list of sides,

1829
01:40:23.905 --> 01:40:25.055
sides also here.

1830
01:40:28.235 --> 01:40:30.855
And then I will just do one update operation.

1831
01:40:32.345 --> 01:40:33.485
Or sorry, this is an insert.

1832
01:40:36.685 --> 01:40:38.895
This is much, much, much more efficient.

1833
01:40:39.045 --> 01:40:40.735
This is actually twice as efficient.

1834
01:40:40.735 --> 01:40:42.295
If I had to argue, uh,

1835
01:40:42.385 --> 01:40:45.295
Salesforce does not optimize your code.

1836
01:40:45.295 --> 01:40:46.655
It's not gonna say like, oh, I can see

1837
01:40:46.655 --> 01:40:48.135
that you're doing an update here and here

1838
01:40:48.475 --> 01:40:49.975
and they're not gonna interfere with each other.

1839
01:40:50.435 --> 01:40:51.895
The compiler's not that smart.

1840
01:40:52.235 --> 01:40:55.845
You have to be smart in this case to say, I only need

1841
01:40:55.845 --> 01:40:57.445
to make one trip to the database

1842
01:40:58.065 --> 01:41:00.345
and I'm gonna do it like this.

1843
01:41:02.085 --> 01:41:05.785
Why would I also tell you then if we can, any questions on

1844
01:41:05.785 --> 01:41:08.065
that point, like why we're doing this all at once

1845
01:41:08.485 --> 01:41:09.625
before I move to this last

1846
01:41:09.625 --> 01:41:14.215
topic. This is

1847
01:41:14.555 --> 01:41:18.215
You think governor rules, That's another good one.

1848
01:41:18.275 --> 01:41:19.415
Yes. That's where we're going next.

1849
01:41:19.835 --> 01:41:21.215
The other reason you want to do this

1850
01:41:24.325 --> 01:41:26.345
is I can only call this a hundred times.

1851
01:41:28.015 --> 01:41:32.495
I only am allowed to do, uh, 150. Or wait, hold on.

1852
01:41:33.155 --> 01:41:36.015
Am I wrong? Someone correct me if I'm wrong. 150,

1853
01:41:36.135 --> 01:41:37.135
I think it's one 50.

1854
01:41:37.925 --> 01:41:41.105
Is it 150? I think it's 150. 150 DML statements.

1855
01:41:41.465 --> 01:41:44.385
I can only update call, update or insert nope.

1856
01:41:44.525 --> 01:41:49.505
Or delete 150 times period. I can't do it anymore. So

1857
01:41:49.645 --> 01:41:51.665
It should be in your debug if fact check

1858
01:41:51.665 --> 01:41:53.825
Yeah, is is always there. I see you

1859
01:41:53.825 --> 01:41:54.825
Are on point. You are on point,

1860
01:41:54.825 --> 01:41:56.545
man. Yep. One 50. Yep,

1861
01:41:56.545 --> 01:41:57.545
There you go. Yeah,

1862
01:41:57.545 --> 01:41:59.865
I always see that number. So I'm like, okay, one 50.

1863
01:42:00.155 --> 01:42:01.985
There you go. You're gonna, this man's gonna

1864
01:42:01.985 --> 01:42:03.025
pass PD one guys.

1865
01:42:03.375 --> 01:42:04.905
This man's gonna pass PD one.

1866
01:42:05.725 --> 01:42:09.555
All right, so this, I can only do this 150 times.

1867
01:42:10.265 --> 01:42:14.915
That means every single time I call this is a big deal.

1868
01:42:15.915 --> 01:42:17.275
I hope you're never writing code

1869
01:42:17.275 --> 01:42:18.955
where you make 150 statements.

1870
01:42:19.315 --> 01:42:23.035
I believe me, I, I sleep better at night thinking

1871
01:42:23.035 --> 01:42:25.785
that people don't do this, but I've seen different.

1872
01:42:25.785 --> 01:42:26.825
So I know that people do.

1873
01:42:27.325 --> 01:42:30.135
Um, the other reason we don't do this is

1874
01:42:30.215 --> 01:42:31.495
'cause it's a miserable user experience.

1875
01:42:32.075 --> 01:42:33.615
If you have to save a record

1876
01:42:33.915 --> 01:42:36.535
and it's gonna do like 50 DML statements,

1877
01:42:37.045 --> 01:42:38.855
your users are not going to be very happy.

1878
01:42:38.855 --> 01:42:40.935
They're gonna be like, why is this taking so long to save?

1879
01:42:41.435 --> 01:42:44.855
Or, uh, it feels like when I run this batch job,

1880
01:42:44.885 --> 01:42:46.015
it's taking an hour.

1881
01:42:47.635 --> 01:42:49.645
This is where you get into those statements

1882
01:42:50.625 --> 01:42:52.445
or where you get into those problems is using too

1883
01:42:52.445 --> 01:42:53.605
many DML statements.

1884
01:42:54.045 --> 01:42:55.645
'cause these are extremely time consuming,

1885
01:42:57.055 --> 01:42:59.825
like real world time, compute time, time consuming.

1886
01:43:00.165 --> 01:43:03.465
So doing this whenever you can is very useful.

1887
01:43:03.895 --> 01:43:08.155
However, I would caution you against doing this

1888
01:43:08.665 --> 01:43:10.875
without a really good understanding and reason to do it.

1889
01:43:12.235 --> 01:43:17.005
You can make, uh, such a list as this

1890
01:43:17.065 --> 01:43:18.685
and start adding everything to it.

1891
01:43:19.545 --> 01:43:22.085
But this can actually hurt your performance in certain

1892
01:43:22.445 --> 01:43:25.165
scenarios, uh, especially if the list is unordered.

1893
01:43:26.315 --> 01:43:29.615
So I'll caution you against just using one mega list

1894
01:43:29.615 --> 01:43:31.495
of S objects, um,

1895
01:43:32.765 --> 01:43:35.015
because that can make your code harder to read

1896
01:43:35.435 --> 01:43:39.975
and it can make you appreciate less, uh, like the order

1897
01:43:39.975 --> 01:43:41.815
of execution for each individual thing.

1898
01:43:42.525 --> 01:43:45.775
It's also can be very un performant if your records are not

1899
01:43:45.775 --> 01:43:47.175
in the right order within that list.

1900
01:43:49.165 --> 01:43:52.045
So Bao, yes, you can do that.

1901
01:43:53.415 --> 01:43:55.215
I would advise you to not do it.

1902
01:43:55.515 --> 01:43:57.135
That's a personal piece of advice.

1903
01:43:57.595 --> 01:44:00.695
You may get performance gains out of it in some scenarios,

1904
01:44:01.035 --> 01:44:03.015
but it can also make your code harder to read

1905
01:44:03.015 --> 01:44:04.095
and harder to debug.

1906
01:44:07.315 --> 01:44:10.015
So just, you know, use with caution.

1907
01:44:10.775 --> 01:44:11.855
I trust you to use it though

1908
01:44:12.655 --> 01:44:13.775
'cause you seem like a smart guy.

1909
01:44:15.575 --> 01:44:16.955
The last thing I'll mention is this.

1910
01:44:18.975 --> 01:44:21.145
This is what my preferred way

1911
01:44:21.205 --> 01:44:24.385
to do DMLI will almost always prefer to do this.

1912
01:44:25.045 --> 01:44:29.115
Uh, if it were my choice, not only does it look less goofy

1913
01:44:29.135 --> 01:44:32.155
to me, which is a huge value in my book,

1914
01:44:32.345 --> 01:44:34.555
obviously it returns something to you.

1915
01:44:35.015 --> 01:44:36.475
If you look at my screen right here,

1916
01:44:36.905 --> 01:44:38.235
when I'm doing this DML,

1917
01:44:38.355 --> 01:44:40.835
I get something called a database save result.

1918
01:44:42.065 --> 01:44:43.795
That is an object actually.

1919
01:44:43.975 --> 01:44:46.275
And you don't have any equivalent for this in flow as far

1920
01:44:46.275 --> 01:44:48.395
as I know yet.

1921
01:44:48.625 --> 01:44:49.435
They might add it.

1922
01:44:54.085 --> 01:44:56.735
This is a valid assignment of a list

1923
01:44:57.075 --> 01:44:59.015
of database save results.

1924
01:44:59.475 --> 01:45:02.015
The database class has a data structure

1925
01:45:02.115 --> 01:45:04.335
or an object called a save result.

1926
01:45:05.225 --> 01:45:09.875
These save results are things

1927
01:45:09.985 --> 01:45:12.275
that can tell you what happened when you

1928
01:45:12.325 --> 01:45:13.635
tried to insert a record.

1929
01:45:18.745 --> 01:45:19.025
Cool.

1930
01:45:24.045 --> 01:45:25.195
These save results,

1931
01:45:26.035 --> 01:45:28.315
I can look at several things on that are very important.

1932
01:45:28.835 --> 01:45:31.875
I can get, did my operations succeed or fail?

1933
01:45:33.185 --> 01:45:36.505
I can get the ID of the record if I just inserted it.

1934
01:45:37.425 --> 01:45:40.105
I can get the errors, all of them

1935
01:45:40.455 --> 01:45:42.785
that happened when I tried to insert my record.

1936
01:45:45.025 --> 01:45:48.055
These are really, really useful things if you're trying

1937
01:45:48.055 --> 01:45:49.695
to surface errors to your users.

1938
01:45:50.515 --> 01:45:53.875
Um, we can also do this,

1939
01:45:54.135 --> 01:45:55.715
you might say like true or false.

1940
01:45:56.785 --> 01:45:58.875
Well, we can turn off acidic operator

1941
01:45:58.875 --> 01:46:01.635
or sorry, we can make our database operations.

1942
01:46:02.615 --> 01:46:04.435
Um, not all or nothing.

1943
01:46:04.775 --> 01:46:07.435
So this has an additional boole on it.

1944
01:46:07.435 --> 01:46:08.795
We can add called all or nothing.

1945
01:46:09.455 --> 01:46:13.235
If I turn this to false, that means that some of my records

1946
01:46:13.815 --> 01:46:17.035
can fail and some of my records can succeed

1947
01:46:17.255 --> 01:46:18.835
to insert into my database.

1948
01:46:19.415 --> 01:46:21.995
So let's say I broke a validation rule

1949
01:46:22.175 --> 01:46:24.995
or I, uh, missed a required field

1950
01:46:26.495 --> 01:46:28.595
and that was only on two of my records.

1951
01:46:28.815 --> 01:46:32.755
Out of a hundred, this false all

1952
01:46:32.755 --> 01:46:35.955
or nothing false means that I can insert 98 records

1953
01:46:36.415 --> 01:46:37.875
and fail to insert two.

1954
01:46:38.255 --> 01:46:40.035
And I don't throw an exception action.

1955
01:46:42.615 --> 01:46:45.865
This is potentially, uh, very, very useful.

1956
01:46:46.175 --> 01:46:48.425
However, I would caution you again,

1957
01:46:48.455 --> 01:46:50.925
just like I was telling Bayo, this is the, the,

1958
01:46:50.945 --> 01:46:52.445
the Uncle Ben principle of

1959
01:46:52.445 --> 01:46:54.405
with great power comes great responsibility.

1960
01:46:55.365 --> 01:46:56.545
If you're gonna do all

1961
01:46:56.545 --> 01:46:59.105
or nothing false, I hope you're handling

1962
01:46:59.685 --> 01:47:00.905
the ones that are false.

1963
01:47:01.625 --> 01:47:03.265
'cause your code's not gonna throw an exemption.

1964
01:47:03.645 --> 01:47:05.105
You need to log those errors

1965
01:47:05.765 --> 01:47:09.945
or figure out why it is okay for you to fail to insert them.

1966
01:47:10.645 --> 01:47:14.975
In most cases, uh, databases are designed, uh,

1967
01:47:15.395 --> 01:47:19.725
to be, to be all or nothing.

1968
01:47:22.135 --> 01:47:24.035
So it's a rollback. Yes,

1969
01:47:24.095 --> 01:47:25.435
it will roll your database back

1970
01:47:25.895 --> 01:47:28.235
and say everything that just happened didn't happen.

1971
01:47:28.985 --> 01:47:29.995
Yeah, okay.

1972
01:47:30.385 --> 01:47:32.555
This is the way a lot of databases are designed

1973
01:47:32.815 --> 01:47:35.635
and this is generally thought to be a very good practice.

1974
01:47:35.785 --> 01:47:38.335
However, you do have the option in

1975
01:47:38.335 --> 01:47:39.575
Salesforce to turn it off.

1976
01:47:40.575 --> 01:47:42.975
I just want to caution you, if you choose to do that,

1977
01:47:44.245 --> 01:47:45.905
you may wanna look at your save results

1978
01:47:46.125 --> 01:47:47.425
and figure out which one's failed

1979
01:47:47.485 --> 01:47:48.985
and figure out what to do about that.

1980
01:47:49.655 --> 01:47:52.145
This is very useful for, again, integrations

1981
01:47:52.145 --> 01:47:54.825
with another system because you don't always know what's

1982
01:47:54.825 --> 01:47:57.465
happening in that other system or coming back from that API,

1983
01:47:57.925 --> 01:47:59.945
but you do want to get as many into your system

1984
01:47:59.965 --> 01:48:01.465
as possible for some reason, right?

1985
01:48:02.005 --> 01:48:04.825
So you do need to maybe collect the ones that didn't work

1986
01:48:05.165 --> 01:48:06.425
and send something back

1987
01:48:06.925 --> 01:48:08.625
or collect the ones that didn't work.

1988
01:48:09.055 --> 01:48:10.065
Make an error log.

1989
01:48:11.835 --> 01:48:12.945
These are just tools

1990
01:48:13.405 --> 01:48:15.465
and there are a lot of them that you can use

1991
01:48:15.465 --> 01:48:17.385
around inserting records.

1992
01:48:21.815 --> 01:48:25.155
Um, I think this covers the major things that I wanted

1993
01:48:25.155 --> 01:48:27.635
to cover about DML operations.

1994
01:48:28.715 --> 01:48:32.005
When you are working with the next homework assignment

1995
01:48:32.005 --> 01:48:33.405
where it's asking you to do queries

1996
01:48:33.405 --> 01:48:35.525
and DML together, um,

1997
01:48:37.535 --> 01:48:40.035
you're gonna run into some, some definitely some

1998
01:48:40.035 --> 01:48:41.955
of the harder problems that we have encountered

1999
01:48:41.975 --> 01:48:44.795
yet they're gonna ask you to apply everything we learned

2000
01:48:44.815 --> 01:48:49.555
so far, looping, uh, maps, queries,

2001
01:48:50.775 --> 01:48:51.855
DML operations,

2002
01:48:52.315 --> 01:48:53.535
and it's gonna ask you to kind

2003
01:48:53.535 --> 01:48:55.775
of think deeply about the way that these combine.

2004
01:48:56.795 --> 01:48:58.535
So, uh, I look forward

2005
01:48:58.715 --> 01:49:00.895
to seeing some questions in Slack about that.

2006
01:49:01.575 --> 01:49:03.415
I look forward to seeing some toil

2007
01:49:03.415 --> 01:49:05.855
and seeing some interesting, uh, responses.

2008
01:49:06.595 --> 01:49:10.895
And I believe we do have our rest week after this homework.

2009
01:49:14.135 --> 01:49:16.045
So, um, yeah,

2010
01:49:18.495 --> 01:49:20.025
there's a lot to learn on this topic.

2011
01:49:20.305 --> 01:49:23.105
I could go on for another three hours about all the nuances

2012
01:49:23.165 --> 01:49:25.345
of, uh, inserting records into Salesforce

2013
01:49:25.405 --> 01:49:26.545
and querying them back out.

2014
01:49:27.125 --> 01:49:28.865
But these are the very basic

2015
01:49:28.865 --> 01:49:30.665
things I think you need to know.

2016
01:49:30.925 --> 01:49:32.345
And then we learned some extra stuff too

2017
01:49:32.345 --> 01:49:33.585
about metadata today.

2018
01:49:34.605 --> 01:49:37.625
Uh, I will be right back in five minutes,

2019
01:49:37.765 --> 01:49:39.185
but to take questions,

2020
01:49:39.245 --> 01:49:42.065
but I, uh, do have to get going at around

2021
01:49:43.935 --> 01:49:47.065
like nine 40 'cause I have to get up early tomorrow to fly,

2022
01:49:47.065 --> 01:49:49.285
fly to California for TDX.

2023
01:49:49.665 --> 01:49:52.125
So, uh, give me like two minutes

2024
01:49:52.185 --> 01:49:53.565
and if anybody has any questions,

2025
01:49:53.675 --> 01:49:54.885
I'll be right back to answer them.

2026
01:49:56.305 --> 01:49:59.315
Have fun at TDX. Do you know about the cigar bar thing?

2027
01:50:01.165 --> 01:50:03.095
Hold on. We are gonna have to discuss that in a moment.

2028
01:50:05.005 --> 01:50:06.175
I'll tell you about it.

2029
01:50:09.255 --> 01:50:11.675
Hey, I have a question for all of us while we wait,

2030
01:50:11.975 --> 01:50:14.705
if anybody wants to chat.

2031
01:50:16.305 --> 01:50:17.875
Yeah, because I have a question too.

2032
01:50:18.035 --> 01:50:22.075
I, I know the answer, but I'm curious. Yes, let's chat.

2033
01:50:22.895 --> 01:50:27.035
Uh, so this happened to me today where I was doing at,

2034
01:50:27.095 --> 01:50:31.915
at work, not in homework, where I was needing

2035
01:50:31.915 --> 01:50:36.875
to prevent an update when I first did not

2036
01:50:36.885 --> 01:50:41.155
check to see if the value supplied by a different system,

2037
01:50:42.395 --> 01:50:45.975
uh, was in a restricted pick list.

2038
01:50:48.375 --> 01:50:51.035
And I mean, I, I found some references.

2039
01:50:51.035 --> 01:50:53.475
There's a actually a pick list object, but,

2040
01:50:54.135 --> 01:50:57.515
and you don't even need to run a query to get at it,

2041
01:50:58.445 --> 01:51:01.965
but, uh, it's caused, it caused me big problems

2042
01:51:02.015 --> 01:51:03.885
until I figured out how to do it.

2043
01:51:04.045 --> 01:51:08.285
I was just wondering if I, it just seems like, uh,

2044
01:51:09.035 --> 01:51:10.605
something really important to know.

2045
01:51:10.905 --> 01:51:12.325
So I, and I don't have the answer.

2046
01:51:12.565 --> 01:51:14.365
I I know what I did for a workaround

2047
01:51:15.495 --> 01:51:16.495
Question. You trying to bypass a

2048
01:51:16.495 --> 01:51:17.455
restricted pick list,

2049
01:51:18.765 --> 01:51:19.765
Right? You, you,

2050
01:51:19.765 --> 01:51:21.715
you have data coming in from a

2051
01:51:21.715 --> 01:51:22.835
variety of places, right?

2052
01:51:22.845 --> 01:51:24.275
Particular org, some

2053
01:51:24.275 --> 01:51:27.555
of it comes in from a different wealth management platform,

2054
01:51:29.325 --> 01:51:33.045
and you, you have make sure

2055
01:51:33.045 --> 01:51:35.205
that if you're gonna do an update, you're not trying

2056
01:51:35.205 --> 01:51:37.125
to update a restricted P list

2057
01:51:37.125 --> 01:51:38.645
with the value that's not in it.

2058
01:51:41.315 --> 01:51:43.035
I hate say it. What I normally do is I remove the

2059
01:51:43.235 --> 01:51:44.795
restricted P list so I can fix it later.

2060
01:51:46.025 --> 01:51:50.475
Yeah. Are you talking from a data,

2061
01:51:50.975 --> 01:51:53.675
um, data import point of view

2062
01:51:53.895 --> 01:51:57.035
or like a coding to kind of true validation?

2063
01:51:59.225 --> 01:52:02.515
Yeah. Uh, are you trying to true validation rule

2064
01:52:02.655 --> 01:52:06.925
or like an error if anyone wants to like maybe update?

2065
01:52:07.425 --> 01:52:12.285
Mm-hmm. I think I'm just trying to understand like

2066
01:52:13.025 --> 01:52:17.725
the question, like are you trying to like understand a way

2067
01:52:17.725 --> 01:52:19.805
to handle it in case of next time or?

2068
01:52:22.685 --> 01:52:24.535
Well, so I'll give you the example.

2069
01:52:24.795 --> 01:52:27.735
Um, we're getting updates on

2070
01:52:28.295 --> 01:52:30.735
a couple hundred thousand records twice a day.

2071
01:52:31.355 --> 01:52:34.295
And these are all some sort of a financial account,

2072
01:52:34.295 --> 01:52:37.015
like an IRA or inherited IRA or whatever.

2073
01:52:38.255 --> 01:52:42.835
And we're noticing that the more records that come in, uh,

2074
01:52:42.835 --> 01:52:47.115
people will, uh, put a space in front

2075
01:52:47.115 --> 01:52:49.435
of IRA, uh, they'll put

2076
01:52:50.825 --> 01:52:53.185
IIRA if it's an inherited IRA

2077
01:52:53.185 --> 01:52:55.225
and all these things become things

2078
01:52:55.225 --> 01:52:57.105
that are not in our restricted pick list.

2079
01:52:59.045 --> 01:53:00.045
But you don't know it.

2080
01:53:01.765 --> 01:53:03.585
Are you exposing these fields on a website

2081
01:53:03.585 --> 01:53:05.145
or a community site or something?

2082
01:53:05.605 --> 01:53:09.265
Uh, it's, uh, An integration stuff. I think

2083
01:53:09.695 --> 01:53:10.865
It's an integration, yeah.

2084
01:53:10.915 --> 01:53:12.425
We're running with a MuleSoft.

2085
01:53:13.005 --> 01:53:15.065
Um, okay. Because I, I know my integrations,

2086
01:53:15.385 --> 01:53:16.905
I do a dynamic pick list,

2087
01:53:16.905 --> 01:53:18.825
but I only show the fields

2088
01:53:18.825 --> 01:53:20.145
that I have in Salesforce to them.

2089
01:53:20.605 --> 01:53:21.605
Mm-hmm.

2090
01:53:22.405 --> 01:53:24.185
I'm just wondering, uh, when you're,

2091
01:53:25.845 --> 01:53:28.425
and now that Chase is back, I'm really curious about

2092
01:53:30.945 --> 01:53:35.405
do you make your cold, vulnerable, um, and not flexible?

2093
01:53:35.425 --> 01:53:37.645
Or do you make it, you know, a little bit more boil,

2094
01:53:37.785 --> 01:53:40.885
not boilerplate, but resistant to errors like that?

2095
01:53:41.685 --> 01:53:44.895
I think it's best you, like you

2096
01:53:46.195 --> 01:53:47.855
use the restricted quick list,

2097
01:53:48.515 --> 01:53:52.055
but like you say, you are using newsoft, I'm not familiar

2098
01:53:52.085 --> 01:53:56.015
with newsoft, but you could write a reject

2099
01:53:56.715 --> 01:54:00.615
to kind of detect the pattern and then if it has

2100
01:54:01.275 --> 01:54:06.055
or thing for that is the upkeep, the upkeep

2101
01:54:06.115 --> 01:54:09.735
for maintaining that, you know, database for, okay,

2102
01:54:09.825 --> 01:54:13.935
maybe if it contains IR rss, if the value contains IS

2103
01:54:14.735 --> 01:54:16.125
topic to IRS,

2104
01:54:16.145 --> 01:54:19.325
but that's there, there could be an error in that also

2105
01:54:19.325 --> 01:54:21.525
because what's the, um,

2106
01:54:24.285 --> 01:54:25.695
what if the value isn't,

2107
01:54:25.805 --> 01:54:29.015
what if the intended value isn't actually IS

2108
01:54:29.035 --> 01:54:31.495
and it just complain maybe Iris or something?

2109
01:54:31.925 --> 01:54:34.175
Yeah. Would you chalk it up into IRS also?

2110
01:54:34.905 --> 01:54:38.555
So like, um,

2111
01:54:40.065 --> 01:54:42.595
Yeah, I'm missed This.

2112
01:54:44.815 --> 01:54:48.355
Or like if you could through error

2113
01:54:49.255 --> 01:54:53.115
and send it back to them, warn them about the list

2114
01:54:53.115 --> 01:54:55.115
of records that I didn't committing to do this

2115
01:54:55.895 --> 01:54:57.195
so they can all Right.

2116
01:54:57.195 --> 01:54:59.595
Right. There's a lot of different ways to do it.

2117
01:54:59.705 --> 01:55:04.365
What, what we're concerned about is, so Chase,

2118
01:55:04.505 --> 01:55:08.425
I'm, I'm asking, uh, like best practice question.

2119
01:55:09.115 --> 01:55:12.265
We're doing these, these inserts or inserts or updates

2120
01:55:12.645 --> 01:55:16.785
and, uh, this happened to me at where, at my day job today,

2121
01:55:16.785 --> 01:55:21.225
where another outside data aggregator source,

2122
01:55:21.605 --> 01:55:24.065
so to speak, was added to the inflow of data.

2123
01:55:24.735 --> 01:55:27.865
Okay. And what we have is a restricted pick list

2124
01:55:27.865 --> 01:55:29.065
started having fault.

2125
01:55:29.805 --> 01:55:34.665
So the question is I have is do I design my apex

2126
01:55:34.845 --> 01:55:37.065
to present, prevent that in one place,

2127
01:55:37.285 --> 01:55:39.345
or handle that exception in one place?

2128
01:55:40.365 --> 01:55:42.545
Or do I accept the burden of going to this

2129
01:55:43.685 --> 01:55:45.525
seemingly infinite number of different sources

2130
01:55:45.615 --> 01:55:46.685
where it could come from

2131
01:55:46.705 --> 01:55:48.405
and stopping it at each of those places?

2132
01:55:49.305 --> 01:55:52.725
Mm-hmm. So I, I didn't know how you did that in here

2133
01:55:52.725 --> 01:55:56.685
where you checked to see without having to do another DML.

2134
01:55:57.705 --> 01:55:59.925
So you're saying, uh, you are

2135
01:56:00.915 --> 01:56:03.405
basically consuming data from a bunch of different sources

2136
01:56:03.665 --> 01:56:06.565
and you want your data to be in, uh, a specific format?

2137
01:56:07.145 --> 01:56:08.365
Yep. Mm-hmm. Yeah. Okay.

2138
01:56:08.745 --> 01:56:12.945
Uh, so are they pushing the data to you?

2139
01:56:14.925 --> 01:56:17.655
Yeah. Effectively, uh, a MuleSoft app is, right? Yeah.

2140
01:56:17.805 --> 01:56:19.015
Okay. So

2141
01:56:20.155 --> 01:56:24.295
and all of a sudden they connected a new source of data

2142
01:56:24.475 --> 01:56:25.895
and you're just consuming it

2143
01:56:25.955 --> 01:56:28.495
and it doesn't have this value that it's supposed to have.

2144
01:56:28.905 --> 01:56:31.115
Right? So this,

2145
01:56:31.115 --> 01:56:33.635
there's a couple angles you can approach this from.

2146
01:56:33.855 --> 01:56:37.275
Uh, if you're saying like, I have no control, uh,

2147
01:56:37.275 --> 01:56:40.555
and the business is making decisions without talking

2148
01:56:40.635 --> 01:56:43.155
to engineering, and engineering is making choices without

2149
01:56:43.155 --> 01:56:44.155
talking to the business,

2150
01:56:44.895 --> 01:56:48.315
or rather, work is not being like well communicated

2151
01:56:48.315 --> 01:56:49.355
and orchestrated, which is the

2152
01:56:49.355 --> 01:56:50.475
case of a lot of organizations.

2153
01:56:50.705 --> 01:56:52.115
Yeah. Um, if we're,

2154
01:56:52.115 --> 01:56:53.475
we're talking about that scenario, right?

2155
01:56:53.615 --> 01:56:55.795
We have no, that's correct. Way to communicate better, okay?

2156
01:56:55.795 --> 01:56:59.315
Mm-hmm. If that's the case, um, you have

2157
01:56:59.315 --> 01:57:01.715
to make a couple decisions, um, about

2158
01:57:02.265 --> 01:57:04.875
what your engineering teams are gonna do about this.

2159
01:57:05.455 --> 01:57:08.195
So one of those things is, uh,

2160
01:57:09.215 --> 01:57:11.315
who handles the errors and what happens

2161
01:57:11.575 --> 01:57:12.915
and is there an SLA

2162
01:57:12.915 --> 01:57:14.875
around getting this data into the system?

2163
01:57:15.025 --> 01:57:17.355
Because there's a couple things you can say.

2164
01:57:17.415 --> 01:57:20.835
You can say, I wanna make my code, uh, be able

2165
01:57:20.835 --> 01:57:24.155
to recover from these types of things and coalesce values.

2166
01:57:24.815 --> 01:57:28.035
Mm-hmm. Or highlight the records that have invalid values,

2167
01:57:28.135 --> 01:57:29.675
but still allow them into my system

2168
01:57:30.015 --> 01:57:31.115
and flag them in some way.

2169
01:57:31.215 --> 01:57:32.635
That's one way you can go, right?

2170
01:57:32.985 --> 01:57:35.115
Just let the dirty data in and clean it up later.

2171
01:57:35.695 --> 01:57:39.395
The other way you can go is, I expect this code,

2172
01:57:39.465 --> 01:57:42.835
this API this database table to work in a specific way.

2173
01:57:42.855 --> 01:57:45.115
And if it does not work in that way, I want

2174
01:57:45.115 --> 01:57:46.435
to know about it immediately.

2175
01:57:46.615 --> 01:57:48.835
In which case, you don't make your code flexible,

2176
01:57:49.095 --> 01:57:50.715
you don't let the dirty data in,

2177
01:57:51.015 --> 01:57:54.395
and you want every piece of code in your system to be

2178
01:57:55.685 --> 01:57:57.865
filing logs, throwing exceptions,

2179
01:57:57.965 --> 01:58:01.465
and panicking, throwing alarms so that you can see

2180
01:58:01.465 --> 01:58:03.705
that problem and get engineering attention on

2181
01:58:03.705 --> 01:58:05.545
it to fix that problem. Mm-hmm.

2182
01:58:05.625 --> 01:58:06.625
Yeah. I understand.

2183
01:58:07.095 --> 01:58:08.345
It's a two extremes. And the,

2184
01:58:08.345 --> 01:58:09.985
the reality generally lands somewhere in the middle

2185
01:58:09.985 --> 01:58:13.315
where it's like, you know, okay, well

2186
01:58:13.895 --> 01:58:15.355
how critical is this really?

2187
01:58:15.825 --> 01:58:17.155
Okay. It's not that important.

2188
01:58:17.305 --> 01:58:20.155
Alright, we'll let you have that bad data, uh,

2189
01:58:20.215 --> 01:58:21.475
and put it into our system.

2190
01:58:21.735 --> 01:58:26.515
Mm-hmm. Uh, for me, what, what I'm hearing here, if I,

2191
01:58:27.455 --> 01:58:31.065
if I heard this problem, I would really want to get

2192
01:58:31.065 --> 01:58:34.275
to the root of who's publishing the data

2193
01:58:35.095 --> 01:58:36.395
and kinda like, can we talk to them

2194
01:58:36.395 --> 01:58:37.835
before they start publishing data?

2195
01:58:37.835 --> 01:58:39.995
Right? But like, the reality is I know that

2196
01:58:39.995 --> 01:58:41.155
that's not how it happens, right?

2197
01:58:41.345 --> 01:58:45.645
No. So I, I guess for me, my bias is towards

2198
01:58:46.195 --> 01:58:49.205
code should fail loudly and code should fail proudly

2199
01:58:49.305 --> 01:58:51.645
and let you know that something is not right, so

2200
01:58:51.645 --> 01:58:55.165
that you can go and fix that so that you can say, oh, such

2201
01:58:55.165 --> 01:58:57.325
and such integration was at this time

2202
01:58:57.985 --> 01:59:01.045
was pushing these records in from this person.

2203
01:59:01.945 --> 01:59:04.725
And they are, this is the problem right here, this line,

2204
01:59:04.835 --> 01:59:06.685
it's throwing a validation error.

2205
01:59:07.065 --> 01:59:09.525
Uh, this pick list value doesn't exist. Yeah.

2206
01:59:09.525 --> 01:59:11.845
And if we get that error, then we can say,

2207
01:59:11.845 --> 01:59:13.125
okay guys, we have two options.

2208
01:59:13.135 --> 01:59:15.445
Let's go tell 'em to stop. Which is not an option, right?

2209
01:59:15.445 --> 01:59:19.285
Maybe or, uh, if we're not a human being we can talk to

2210
01:59:19.345 --> 01:59:21.365
and make decisions with, we have to say,

2211
01:59:21.475 --> 01:59:23.085
what should this value coalesce to?

2212
01:59:24.335 --> 01:59:25.925
Right. Should we coalesce this value

2213
01:59:25.995 --> 01:59:27.205
into another existing value?

2214
01:59:27.625 --> 01:59:30.165
And then in your code, you just say in your integration

2215
01:59:30.165 --> 01:59:31.605
code, you just be like, okay,

2216
01:59:31.705 --> 01:59:36.125
and if, uh, JSON has this value, uh,

2217
01:59:36.715 --> 01:59:38.085
make it be this value.

2218
01:59:38.785 --> 01:59:40.955
Sure. And then that's th you know, then you just had

2219
01:59:40.955 --> 01:59:43.435
to introduce three lines of code to fix that problem.

2220
01:59:44.255 --> 01:59:46.195
And you noted that exists when you're reading

2221
01:59:46.195 --> 01:59:47.195
through your integration code.

2222
01:59:47.305 --> 01:59:49.435
Yeah. Yeah. Um, I, and sometimes that's just all

2223
01:59:49.435 --> 01:59:50.435
I have. I just wondering. Yeah.

2224
01:59:50.435 --> 01:59:51.515
I I wanna let others

2225
01:59:51.535 --> 01:59:52.595
to be able to ask questions.

2226
01:59:52.755 --> 01:59:54.795
I appreciate everybody's comment on it.

2227
01:59:55.135 --> 01:59:56.555
And yours Chase as well?

2228
01:59:56.695 --> 01:59:58.155
No, it's, I mean it's a, it's a real problem

2229
01:59:58.215 --> 02:00:00.195
and uh, always with these technical things is the question

2230
02:00:00.195 --> 02:00:01.675
is, can I have a human conversation

2231
02:00:01.675 --> 02:00:04.675
before I have to do something at the code level, right.

2232
02:00:04.775 --> 02:00:06.115
Or do I gotta make it work?

2233
02:00:06.755 --> 02:00:08.595
I was just wondering if there's an apex way

2234
02:00:08.655 --> 02:00:11.395
to know the contents of a pick list be to prevent it.

2235
02:00:11.565 --> 02:00:14.395
There is actually, uh, you can use,

2236
02:00:16.375 --> 02:00:17.635
So is that like a contains,

2237
02:00:20.075 --> 02:00:22.095
So you will end up with a contained statement,

2238
02:00:22.195 --> 02:00:23.735
but you have to get the pick list values

2239
02:00:24.075 --> 02:00:25.215
to get the pick list values.

2240
02:00:25.475 --> 02:00:27.095
You can have to know the type

2241
02:00:27.095 --> 02:00:28.295
of object you are dealing with.

2242
02:00:28.365 --> 02:00:31.735
Yeah. Uh, you would say account you, uh,

2243
02:00:31.955 --> 02:00:36.095
or no, it would be schema account,

2244
02:00:36.465 --> 02:00:37.975
which is an object in your system

2245
02:00:37.975 --> 02:00:39.095
that gets created automatically.

2246
02:00:39.255 --> 02:00:43.655
'cause you have an account get, uh, get s object type.

2247
02:00:43.885 --> 02:00:45.535
Then once you've got the S object type,

2248
02:00:45.675 --> 02:00:46.975
you describe the S object.

2249
02:00:47.405 --> 02:00:49.895
When we've described the S object, you can get the fields.

2250
02:00:50.605 --> 02:00:53.615
Yeah. Or Wait, it's just fields I believe actually

2251
02:00:54.195 --> 02:00:57.135
you get the, you fields, fields returns a map.

2252
02:00:57.755 --> 02:00:59.695
You get the name of the field,

2253
02:00:59.695 --> 02:01:01.815
which we could call this industry in this example.

2254
02:01:02.855 --> 02:01:05.395
And then you would call get, describe again on that field,

2255
02:01:05.395 --> 02:01:07.875
which is gonna give you a describe S object field result.

2256
02:01:08.385 --> 02:01:12.435
Then you can get, you can get into that.

2257
02:01:12.965 --> 02:01:15.035
Right. Okay. So you just answered my question.

2258
02:01:15.185 --> 02:01:17.635
None of that right there get, that's not a,

2259
02:01:17.655 --> 02:01:19.675
that's not a D ml, that's not a query.

2260
02:01:21.305 --> 02:01:22.445
No, it doesn't count towards

2261
02:01:22.445 --> 02:01:23.445
Your query. This is intro respecting on your

2262
02:01:23.445 --> 02:01:23.805
schema.

2263
02:01:23.805 --> 02:01:25.765
This is intro inspecting on your schema. Yeah.

2264
02:01:25.825 --> 02:01:27.445
Is not querying. You get this for free.

2265
02:01:27.825 --> 02:01:31.245
So you just know what the account object has.

2266
02:01:31.805 --> 02:01:33.525
I will tell you though, this isn't a query,

2267
02:01:33.825 --> 02:01:35.605
but it costs performance to go

2268
02:01:35.605 --> 02:01:37.685
and introspect onto your S object model.

2269
02:01:37.985 --> 02:01:41.645
If your account has like a thousand fields when you call

2270
02:01:42.025 --> 02:01:45.245
fields, it is going to load up all those fields.

2271
02:01:45.715 --> 02:01:48.405
Sure. Um, and until recently, you did not have a way

2272
02:01:48.425 --> 02:01:50.325
to stop it from loading up all those fields.

2273
02:01:50.325 --> 02:01:54.045
And you call this, now you can get describe, uh,

2274
02:01:55.215 --> 02:01:58.485
until it to defer loading up all the fields used to though.

2275
02:01:58.485 --> 02:02:01.725
We just grab 'em all. So if you had like, gotcha a a ton

2276
02:02:01.725 --> 02:02:02.925
of fields, it'd be a, you know,

2277
02:02:03.145 --> 02:02:05.645
All right, now this is, yeah.

2278
02:02:05.645 --> 02:02:07.285
If I'm backed into it, this is what I'll do.

2279
02:02:07.285 --> 02:02:09.125
But this answers the question hypothetically.

2280
02:02:09.125 --> 02:02:10.125
You can do that.

2281
02:02:10.935 --> 02:02:12.275
Yes. Hypothetically, you can check

2282
02:02:12.275 --> 02:02:14.515
for the pick list values, see which one you,

2283
02:02:15.015 --> 02:02:16.675
if it fits into the pick list values

2284
02:02:16.895 --> 02:02:18.835
and throw an error if it doesn't, that allows you

2285
02:02:18.835 --> 02:02:21.035
to throw really strongly typed errors.

2286
02:02:21.455 --> 02:02:24.435
Uh, and if you don't have that opportunity, you have that,

2287
02:02:24.575 --> 02:02:27.675
uh, restricted pick list that will just throw the exception

2288
02:02:27.815 --> 02:02:29.715
and hopefully you will allow that exception

2289
02:02:29.715 --> 02:02:30.715
to bubble up in a way

2290
02:02:30.715 --> 02:02:32.555
that people can address it and make a patch.

2291
02:02:33.065 --> 02:02:34.835
Yeah. Very good. Thanks so much.

2292
02:02:35.355 --> 02:02:37.275
I wanna let others ask questions. Yeah,

2293
02:02:37.275 --> 02:02:38.275
Sure. What other questions

2294
02:02:38.275 --> 02:02:40.875
do we have about DML or inquiries

2295
02:02:45.175 --> 02:02:47.585
When you were doing the DML on two different objects?

2296
02:02:48.265 --> 02:02:51.685
Is it possible to do just 1D ML for both objects?

2297
02:02:51.765 --> 02:02:52.605
I mean, I've never seen it.

2298
02:02:52.725 --> 02:02:53.805
I was just curious if you could do it.

2299
02:02:54.585 --> 02:02:57.845
Yes, you can. You cannot relate them in the same call

2300
02:02:57.945 --> 02:03:01.045
unless they have, uh, an external ID

2301
02:03:01.465 --> 02:03:03.685
or a shallow reference to associate them.

2302
02:03:03.735 --> 02:03:04.965
There is an article on that,

2303
02:03:04.965 --> 02:03:07.485
and Warren did a video on it actually, uh,

2304
02:03:07.485 --> 02:03:09.485
on his YouTube channel on how to, uh,

2305
02:03:09.545 --> 02:03:11.525
update two related objects in one call,

2306
02:03:11.695 --> 02:03:14.285
which is the more common way, in my opinion.

2307
02:03:14.705 --> 02:03:17.245
You're not really saving

2308
02:03:17.355 --> 02:03:19.785
that much if you are doing that.

2309
02:03:19.795 --> 02:03:23.145
There are certain use cases where that is crazy useful, uh,

2310
02:03:23.815 --> 02:03:26.545
bulk scenarios when you're, uh, working against the rest.

2311
02:03:26.705 --> 02:03:31.145
API is one of them, but in Apex just do two statements.

2312
02:03:32.095 --> 02:03:34.425
Okay. So like on the one you did today, the sides

2313
02:03:34.445 --> 02:03:37.305
and the burger, you would leave 'em separate, not

2314
02:03:37.445 --> 02:03:40.625
unless you had mass so many habits of records. I would,

2315
02:03:41.305 --> 02:03:42.305
I would. There are

2316
02:03:42.305 --> 02:03:45.665
a couple other opinions about that, uh, published,

2317
02:03:45.925 --> 02:03:49.585
you know, in like, uh, Dana Apple Man's book.

2318
02:03:49.785 --> 02:03:51.145
I think he covers that scenario.

2319
02:03:51.605 --> 02:03:55.505
But, uh, my opinion, keep your code readable if you,

2320
02:03:55.605 --> 02:03:58.305
and there's a lot of, uh, sharp edges

2321
02:03:58.445 --> 02:04:00.905
and, uh, as we call them in the foot guns,

2322
02:04:01.205 --> 02:04:02.865
you can introduce into your code

2323
02:04:03.475 --> 02:04:04.985
where you can really hurt

2324
02:04:05.225 --> 02:04:06.305
yourself by doing that in the long run.

2325
02:04:06.305 --> 02:04:10.785
Okay. Like, let's say for example, I wanted to insert, uh, a

2326
02:04:11.245 --> 02:04:12.865
and I wanted to insert B

2327
02:04:13.085 --> 02:04:14.905
and I combine them into one statement.

2328
02:04:16.005 --> 02:04:18.945
If I then also introduce some third object,

2329
02:04:19.325 --> 02:04:22.345
now I'm inserting three objects all in one line.

2330
02:04:22.565 --> 02:04:25.185
And that means I cannot split out error handling

2331
02:04:25.345 --> 02:04:26.465
behavior from each of those three.

2332
02:04:26.685 --> 02:04:29.305
If I choose to want to do that, I have

2333
02:04:29.305 --> 02:04:30.585
to do some more complex stuff.

2334
02:04:30.705 --> 02:04:33.705
I have to sort through the save results, check the, the type

2335
02:04:33.705 --> 02:04:35.185
of the object that was inserted,

2336
02:04:35.605 --> 02:04:37.205
and it gets very, you know,

2337
02:04:37.555 --> 02:04:40.125
laborious when I could just call insert three times on three

2338
02:04:40.285 --> 02:04:42.285
separate lists to me. Okay.

2339
02:04:42.285 --> 02:04:43.845
Yeah. So if it, so if it's different objects,

2340
02:04:43.845 --> 02:04:46.125
different inserts, and if it's the same object,

2341
02:04:46.265 --> 02:04:48.125
but you need the record, ID do an insert,

2342
02:04:48.125 --> 02:04:51.205
then get the record Id basically,

2343
02:04:51.635 --> 02:04:52.635
Basically, yeah.

2344
02:04:52.795 --> 02:04:54.645
Okay. You can always get the record IDs

2345
02:04:54.645 --> 02:04:55.965
for if you combine them or not,

2346
02:04:56.505 --> 02:04:58.445
but I would just say in terms of code readability,

2347
02:04:58.995 --> 02:05:00.165
there's no reason to do,

2348
02:05:00.355 --> 02:05:02.685
it's called mixed DML where you are.

2349
02:05:02.685 --> 02:05:05.805
Mm-hmm. Mixing S object type A and S object type B,

2350
02:05:06.115 --> 02:05:09.885
because also if you do ab A b, AB B, AB B

2351
02:05:10.305 --> 02:05:12.725
and you do that more than 10 times, it will throw an error

2352
02:05:12.725 --> 02:05:16.195
that says you cannot, uh, do, you have

2353
02:05:16.195 --> 02:05:18.675
to basically sort the list first before you do it.

2354
02:05:18.935 --> 02:05:21.945
So you can get into, really, you can just,

2355
02:05:21.965 --> 02:05:24.465
you just open yourself up to a bunch of problems

2356
02:05:24.465 --> 02:05:25.625
that you probably don't need to do.

2357
02:05:26.185 --> 02:05:27.745
'cause you shouldn't be running up against

2358
02:05:27.825 --> 02:05:29.105
150 queries anyway.

2359
02:05:29.465 --> 02:05:32.345
I would love to see a scenario where someone, uh,

2360
02:05:32.545 --> 02:05:34.585
legitimately doing a hundred inserts.

2361
02:05:36.405 --> 02:05:38.405
I I have not seen it yet where it was necessary.

2362
02:05:38.945 --> 02:05:39.945
Not even once

2363
02:05:40.585 --> 02:05:42.125
In a day. I do, but not at once.

2364
02:05:43.015 --> 02:05:45.325
Right. Yeah. Not in one, not in the context

2365
02:05:45.425 --> 02:05:46.965
of one synchronous apex thread.

2366
02:05:47.035 --> 02:05:48.035
Yeah.

2367
02:05:48.605 --> 02:05:51.585
How do you log, um, the errors in the platform?

2368
02:05:51.865 --> 02:05:55.105
I know about the ace, uh, apex exception, like emails

2369
02:05:55.255 --> 02:05:56.745
that send you when things break,

2370
02:05:57.205 --> 02:05:59.585
but is there a way to not get the email,

2371
02:05:59.645 --> 02:06:01.705
but also then receive the logs internally?

2372
02:06:02.085 --> 02:06:03.905
Uh, I work with medical data and

2373
02:06:04.145 --> 02:06:06.105
whenever there's like an error, you're not allowed

2374
02:06:06.105 --> 02:06:08.585
to send like a transaction or an email.

2375
02:06:08.605 --> 02:06:10.105
So I've then and effectively had

2376
02:06:10.105 --> 02:06:11.545
to just cut off the logging.

2377
02:06:11.765 --> 02:06:14.585
So when things break, you're kind of blind, um,

2378
02:06:14.775 --> 02:06:16.825
because it's a breach of, um,

2379
02:06:17.295 --> 02:06:19.425
patient medical data if you do allow it.

2380
02:06:19.525 --> 02:06:21.065
So is there a way to actually just,

2381
02:06:21.675 --> 02:06:23.785
other than writing like a single little, Hey,

2382
02:06:23.895 --> 02:06:27.305
save this here, or alert that, um, a way to do that.

2383
02:06:28.485 --> 02:06:33.145
Yes. Uh, because you're working with HIPAA data, correct?

2384
02:06:33.735 --> 02:06:36.075
Mm-hmm. Yeah. I, I,

2385
02:06:38.175 --> 02:06:40.415
I would not point you towards writing your own logger.

2386
02:06:40.655 --> 02:06:44.565
I would use the, this is like the number one logging,

2387
02:06:44.955 --> 02:06:46.645
like a package you can get.

2388
02:06:46.675 --> 02:06:49.485
It's open source. Uh, the people that work on it,

2389
02:06:49.685 --> 02:06:51.085
I have a lot of respect for,

2390
02:06:51.225 --> 02:06:53.445
and a lot of other people in the industry do as well.

2391
02:06:54.185 --> 02:06:58.445
Nebula Logger, uh, is a little complicated, which is why

2392
02:06:59.675 --> 02:07:01.275
I can't recommend it for everyone.

2393
02:07:01.655 --> 02:07:03.515
But this is like your, your,

2394
02:07:03.955 --> 02:07:06.155
I don't have logging in my org and I need it.

2395
02:07:06.425 --> 02:07:09.595
This is your spot to, um,

2396
02:07:11.365 --> 02:07:12.475
start, basically.

2397
02:07:12.665 --> 02:07:15.515
Yeah. You do have to learn kind of like the data model

2398
02:07:15.695 --> 02:07:17.035
and the opinionation of it,

2399
02:07:17.375 --> 02:07:19.755
but this allows you to log things from flows.

2400
02:07:19.755 --> 02:07:21.475
It allows you to log things from Apex.

2401
02:07:21.855 --> 02:07:23.115
It stores a ton of data

2402
02:07:23.335 --> 02:07:25.395
and it's relatively, uh, performance.

2403
02:07:25.575 --> 02:07:30.015
If you're not like a performance, uh, hungry org

2404
02:07:30.015 --> 02:07:32.495
and you don't have like time requirements,

2405
02:07:32.775 --> 02:07:34.975
I would probably always point to this as the place to start

2406
02:07:35.090 --> 02:07:37.765
with logging in Apex because it's a known gap.

2407
02:07:38.305 --> 02:07:40.085
Um mm-hmm. If you're working with HIPAA data,

2408
02:07:40.145 --> 02:07:43.165
the reason I would rec, uh, recommend this one is

2409
02:07:43.165 --> 02:07:45.325
that I know that there are finance

2410
02:07:45.945 --> 02:07:48.365
and healthcare organizations using this.

2411
02:07:49.585 --> 02:07:54.385
I need to see what tools they have for masking data though,

2412
02:07:54.575 --> 02:07:55.585
because yeah,

2413
02:07:56.485 --> 02:07:59.225
If it's saving like internally without going out

2414
02:07:59.485 --> 02:08:00.785
and it stays behind the login,

2415
02:08:01.125 --> 02:08:02.905
that's like the easy way to determine that.

2416
02:08:02.905 --> 02:08:06.185
That's just safe. So as long as it's not like sending it

2417
02:08:06.215 --> 02:08:08.265
outside of the database, then you're good.

2418
02:08:08.405 --> 02:08:11.385
So if I can log in, it stays the logs Salesforce good to go.

2419
02:08:11.485 --> 02:08:12.785
That's awesome. Thank you. This

2420
02:08:12.915 --> 02:08:13.915
Saves in Salesforce. Yeah.

2421
02:08:13.915 --> 02:08:15.185
This is gonna solve your problem.

2422
02:08:15.805 --> 02:08:20.365
Um, I, there's a lot of customization you can do,

2423
02:08:20.385 --> 02:08:22.125
but I would really recommend to keep it simple.

2424
02:08:23.015 --> 02:08:24.025
Yeah. Um,

2425
02:08:24.125 --> 02:08:27.105
and if you read through this right here, it's a lot to read

2426
02:08:27.105 --> 02:08:28.625
through, but if you become like

2427
02:08:29.285 --> 02:08:32.545
the logging guy at your company, uh, that is very,

2428
02:08:32.545 --> 02:08:35.025
very powerful because then people will come

2429
02:08:35.025 --> 02:08:36.185
to you with all sorts of problems.

2430
02:08:36.185 --> 02:08:38.385
You solve people's problems. Oh, I love Zachary.

2431
02:08:38.385 --> 02:08:40.105
He's the logger guy. He's gonna help know how

2432
02:08:40.105 --> 02:08:41.825
to fix my problem because he's got the logs.

2433
02:08:41.845 --> 02:08:42.905
He knows how the log works.

2434
02:08:43.445 --> 02:08:44.785
Before long you get a, you know,

2435
02:08:44.785 --> 02:08:45.945
you get pushed up, you get promoted.

2436
02:08:46.485 --> 02:08:48.545
So this is, uh, a lot

2437
02:08:48.545 --> 02:08:50.625
of information on this NEA logger page,

2438
02:08:50.725 --> 02:08:54.465
but, um, I designed my company's custom logger,

2439
02:08:56.255 --> 02:08:58.345
like 50% inspiration from this.

2440
02:08:58.405 --> 02:09:01.625
Mm-hmm. We just could not tolerate the performance

2441
02:09:01.885 --> 02:09:03.905
and the data model complexity.

2442
02:09:04.705 --> 02:09:08.555
Plus we kind of already had like a rough logger, so I had

2443
02:09:08.555 --> 02:09:10.035
to kind of work around that constraint.

2444
02:09:10.335 --> 02:09:13.795
Um, but if you have nothing, go check this out,

2445
02:09:13.815 --> 02:09:15.505
man. Go check this out, please.

2446
02:09:15.535 --> 02:09:17.505
Cool. Yeah, that's great. Thank you so much.

2447
02:09:18.135 --> 02:09:19.985
Yeah, that's a big deal. Yeah.

2448
02:09:19.985 --> 02:09:21.385
Like understated, right? Yeah,

2449
02:09:21.895 --> 02:09:25.185
It's very, I mean, logging is like a foundation of, uh,

2450
02:09:26.855 --> 02:09:28.545
programming Yeah.

2451
02:09:28.595 --> 02:09:30.665
Alone, like cloud, uh, programming.

2452
02:09:30.725 --> 02:09:32.225
So it's very, very important.

2453
02:09:32.445 --> 02:09:34.225
Uh, and I hope this, uh,

2454
02:09:34.565 --> 02:09:36.705
at least gets you thinking in the right direction,

2455
02:09:36.725 --> 02:09:38.105
if not is the right answer for you.

2456
02:09:38.975 --> 02:09:41.945
Yeah. At the moment, I have to write, like, send a,

2457
02:09:41.945 --> 02:09:43.785
when the fault hits, it'll send an email

2458
02:09:43.785 --> 02:09:45.785
and be like, ah, this sort of flow broke.

2459
02:09:45.805 --> 02:09:49.145
And don't say how just around this, you know,

2460
02:09:49.165 --> 02:09:50.265
so that it's safe.

2461
02:09:50.885 --> 02:09:53.305
Um, but I did mention quickly, if you don't have anything

2462
02:09:53.305 --> 02:09:54.585
to do after the event,

2463
02:09:55.225 --> 02:09:57.265
whenever you're at a Salesforce convention, always go

2464
02:09:57.265 --> 02:10:00.225
to the cigar bar and it's called the Cigar Bar and Grill.

2465
02:10:00.225 --> 02:10:01.465
There's like a bunch of them,

2466
02:10:01.485 --> 02:10:03.145
but that, that combination of names,

2467
02:10:03.445 --> 02:10:04.705
that's where you'll find why

2468
02:10:04.705 --> 02:10:05.545
Is it always around there

2469
02:10:06.965 --> 02:10:07.995
Waits. What am I gonna find there?

2470
02:10:08.205 --> 02:10:11.355
Sorry. That's like, uh, a lot of, um,

2471
02:10:12.025 --> 02:10:15.755
like really old industry Salesforce folks go there

2472
02:10:16.085 --> 02:10:18.235
after party, so you'll find like the speakers

2473
02:10:18.455 --> 02:10:20.475
and the golden hoodies and and such.

2474
02:10:20.655 --> 02:10:21.955
So it's a really good way to get in

2475
02:10:21.955 --> 02:10:24.075
and just meet a lot of good, good people.

2476
02:10:24.985 --> 02:10:27.075
Fantastic. Thank you for that. I had no idea.

2477
02:10:27.255 --> 02:10:30.315
I'm, I, I have not gone to, uh,

2478
02:10:32.055 --> 02:10:34.485
like I've gone to one world tour in Atlanta,

2479
02:10:34.825 --> 02:10:36.645
but I, I've been doing this for five years.

2480
02:10:36.885 --> 02:10:38.445
Everyone's like, chase, why don't you go to any events?

2481
02:10:38.445 --> 02:10:40.205
Why don't you go to any events? And I'm like, oh,

2482
02:10:40.265 --> 02:10:41.285
I'm not ready yet, you know?

2483
02:10:41.825 --> 02:10:43.205
But now I feel like I'm ready.

2484
02:10:43.645 --> 02:10:46.845
I applied to speak, uh, at some events this later,

2485
02:10:46.875 --> 02:10:49.205
this later this year, and I got, uh, accepted

2486
02:10:49.225 --> 02:10:51.085
to two of them.

2487
02:10:51.465 --> 02:10:53.645
So that's exciting. I got another one today

2488
02:10:53.645 --> 02:10:56.975
that I think I'm going to go to, so that's pretty cool.

2489
02:10:57.565 --> 02:11:01.055
I'll keep it cigar bar. I will, I'll keep that one in my

2490
02:11:02.475 --> 02:11:04.535
And grill long Term memory, cigar bar

2491
02:11:04.635 --> 02:11:06.055
and grill in my long term memory.

2492
02:11:06.085 --> 02:11:07.255
Yeah. That'll, that'll get you there. Yep.

2493
02:11:07.835 --> 02:11:09.935
And grill. I love grill. I love grill. Right.

2494
02:11:10.045 --> 02:11:11.535
Well have fun and down. Yeah.

2495
02:11:12.105 --> 02:11:13.375
Thank you. Yeah. Can I ask

2496
02:11:13.375 --> 02:11:14.415
you one other quick question?

2497
02:11:14.915 --> 02:11:17.335
Yep. I got, uh, about four more minutes.

2498
02:11:17.685 --> 02:11:19.655
Okay. So I'm, I'm a nonprofit person.

2499
02:11:20.135 --> 02:11:22.535
I always open in nonprofit world. Mm-hmm.

2500
02:11:22.615 --> 02:11:24.615
There's a lot of like community clouds.

2501
02:11:25.105 --> 02:11:26.815
Their test classes are terrible.

2502
02:11:27.795 --> 02:11:30.975
Yes, they are. Is it okay, I mean, is it normal

2503
02:11:31.035 --> 02:11:32.935
or is it okay to update their test classes

2504
02:11:33.075 --> 02:11:34.655
so you get a better co I'm very

2505
02:11:34.655 --> 02:11:35.895
particular about my code coverage.

2506
02:11:35.895 --> 02:11:38.375
It's gotta be 90 or better, or don't even put it in my org.

2507
02:11:39.255 --> 02:11:42.735
Hmm. So the risk with updating the test classes,

2508
02:11:42.955 --> 02:11:46.975
if you are a journeyman developer

2509
02:11:46.975 --> 02:11:50.415
and you're looking at like existing terrible test classes,

2510
02:11:50.545 --> 02:11:52.695
let's call it, or hard to read is you mm-hmm.

2511
02:11:52.795 --> 02:11:54.895
If you are updating them

2512
02:11:55.715 --> 02:11:58.775
and they're genuinely asserting valid functionality

2513
02:11:59.275 --> 02:12:01.295
and you change that assertion either on purpose

2514
02:12:01.395 --> 02:12:05.865
or on accident, you may have lost the ability

2515
02:12:05.885 --> 02:12:08.985
to verify that the original code is doing some weird

2516
02:12:08.985 --> 02:12:11.225
particular thing that it's supposed to be doing.

2517
02:12:11.815 --> 02:12:14.425
Okay. So then why does Salesforce put something in your

2518
02:12:14.425 --> 02:12:17.745
org that has a 76% code coverage? Hmm.

2519
02:12:18.485 --> 02:12:20.345
Oh, you're talking about the nonprofit? Yes,

2520
02:12:20.465 --> 02:12:21.465
I am that Specifically.

2521
02:12:21.815 --> 02:12:23.025
That is a great question.

2522
02:12:23.325 --> 02:12:24.985
Uh, so then the NPSP,

2523
02:12:25.125 --> 02:12:26.385
that's what you're talking about, correct?

2524
02:12:26.805 --> 02:12:31.615
Yep. Yep. NPSP is famously like that.

2525
02:12:32.155 --> 02:12:36.365
And, uh, NPSP originally comes from

2526
02:12:36.365 --> 02:12:37.885
outside of Salesforce. Right.

2527
02:12:38.315 --> 02:12:40.005
Came from the org.org world.

2528
02:12:40.675 --> 02:12:43.245
Yeah. So basically they

2529
02:12:44.065 --> 02:12:47.445
saw the open source community working on that,

2530
02:12:47.865 --> 02:12:49.885
and they said, Hey, that's really nice.

2531
02:12:50.265 --> 02:12:52.965
How would you like us to put our stamp of approval on that?

2532
02:12:54.885 --> 02:12:57.985
And then whatever the code quality was at the time is the

2533
02:12:58.205 --> 02:12:59.705
way the code quality was when they put

2534
02:12:59.705 --> 02:13:00.825
their stamp of approval on it.

2535
02:13:01.085 --> 02:13:05.545
You can also look at this from steel brick, steel brick, uh,

2536
02:13:05.775 --> 02:13:08.305
what is it now, 15 years ago, 10 years ago?

2537
02:13:08.365 --> 02:13:12.105
Mm-hmm. Made, uh, the, the CPQ package,

2538
02:13:12.605 --> 02:13:15.825
you'll not ever see steel brick anywhere except in the API

2539
02:13:15.825 --> 02:13:20.225
names SBQQ is steel brick, uh, quote,

2540
02:13:22.745 --> 02:13:25.605
uh, I don't remember what the other queue is,

2541
02:13:25.605 --> 02:13:27.725
but it's their, it's their CPQ engine

2542
02:13:27.725 --> 02:13:29.365
and Salesforce said, Hey, we really like that.

2543
02:13:29.365 --> 02:13:31.405
Could we buy it off of you?

2544
02:13:32.305 --> 02:13:33.965
And it was such a hot seller,

2545
02:13:34.225 --> 02:13:36.125
it didn't really matter how good the code was.

2546
02:13:36.615 --> 02:13:39.085
There are times where just getting it done

2547
02:13:39.225 --> 02:13:42.445
and getting the KPIs is way more important than, uh,

2548
02:13:42.785 --> 02:13:43.805
you know, code coverage.

2549
02:13:44.465 --> 02:13:46.125
And that was one of those times because

2550
02:13:46.125 --> 02:13:48.485
Even though Community Cloud has terrible code coverage

2551
02:13:48.875 --> 02:13:50.645
just for the forgot password,

2552
02:13:51.355 --> 02:13:53.405
it's got like a 77 controller code is pretty bad.

2553
02:13:54.065 --> 02:13:56.765
Yep. So the other thing is that I, I think some

2554
02:13:56.765 --> 02:13:58.405
of the people that wrote that stuff don't have

2555
02:13:58.405 --> 02:14:00.805
as much knowledge, and this is just speculation.

2556
02:14:01.845 --> 02:14:03.295
They're either in too big of a hurry

2557
02:14:03.295 --> 02:14:05.815
or don't have enough knowledge to fully test like the full

2558
02:14:05.815 --> 02:14:07.935
edges of the code, and they kind of expect you

2559
02:14:08.095 --> 02:14:10.735
to go in there and like beef it up.

2560
02:14:11.235 --> 02:14:15.255
Um, okay. I have no idea to be honest, uh, how some

2561
02:14:15.255 --> 02:14:17.095
of these, like Salesforce stamp

2562
02:14:17.095 --> 02:14:19.535
of approval packages got to the way they are.

2563
02:14:20.215 --> 02:14:23.255
I, I used to get really upset about the way the CCP Q was

2564
02:14:23.595 --> 02:14:27.495
and how fragile CCP Q'S architecture was like once you

2565
02:14:27.495 --> 02:14:30.135
started that to do anything really

2566
02:14:30.135 --> 02:14:31.615
complicated her at scale with it.

2567
02:14:32.115 --> 02:14:35.255
But, you know, it's just one of those things I,

2568
02:14:35.615 --> 02:14:38.015
I really don't know what to say about N-P-S-P-I,

2569
02:14:38.085 --> 02:14:39.775
I've encountered the same thing with NPSP,

2570
02:14:39.775 --> 02:14:41.895
where it's kinda like, Hey Chase, why is it like this?

2571
02:14:41.915 --> 02:14:45.775
And it's like, I don't, I I don't shoot, it's a nonprofit.

2572
02:14:46.245 --> 02:14:47.535
They're different. Don't shoot the messenger.

2573
02:14:48.595 --> 02:14:50.135
I'm just here to make it work. Okay.

2574
02:14:50.135 --> 02:14:53.135
Like, I'm not here to, you know, I I I'm here to help.

2575
02:14:54.035 --> 02:14:56.295
So I, I hate that for you.

2576
02:14:56.955 --> 02:15:00.505
Uh, I think that if you're talking specifically about going

2577
02:15:00.745 --> 02:15:03.065
updating that stuff and it's bring your overall average

2578
02:15:03.465 --> 02:15:07.045
coverage down, I would just carefully update that stuff.

2579
02:15:07.835 --> 02:15:10.245
Yeah. I mean, I'm, I'm, I'm real careful, like I'm,

2580
02:15:10.305 --> 02:15:11.645
I'm still at like 91

2581
02:15:11.645 --> 02:15:14.245
or 92% code coverage even with what they have,

2582
02:15:14.705 --> 02:15:16.325
but it really makes it hard for me

2583
02:15:16.945 --> 02:15:18.405
to write code test classes.

2584
02:15:18.545 --> 02:15:19.845
And I'm terrible at test classes.

2585
02:15:20.045 --> 02:15:22.325
I mean, it takes me forever to write a fricking test classes

2586
02:15:22.585 --> 02:15:24.005
to get good code coverage.

2587
02:15:25.415 --> 02:15:28.865
Yeah. Uh, some of that is, uh,

2588
02:15:28.865 --> 02:15:30.425
we'll talk about this when we talk about test classes.

2589
02:15:31.535 --> 02:15:34.365
There is a way to write your code so that it's easy to test.

2590
02:15:34.515 --> 02:15:36.845
Okay. And some of it we have already been pushing you all

2591
02:15:36.845 --> 02:15:38.725
towards, like, you see all my code is very

2592
02:15:38.825 --> 02:15:41.165
linear and straight aligned.

2593
02:15:41.585 --> 02:15:44.725
Mm-hmm. And uh, when I were talking about earlier on in the

2594
02:15:44.725 --> 02:15:47.565
lesson about checking for not null

2595
02:15:47.625 --> 02:15:50.485
and then doing something instead of checking

2596
02:15:50.545 --> 02:15:52.285
for is null, go home and quit.

2597
02:15:52.285 --> 02:15:56.565
Real winners quit. Um, the reason I say real winners quit is

2598
02:15:56.565 --> 02:15:59.685
because it's easier to test your code sometimes,

2599
02:15:59.915 --> 02:16:01.565
because I don't have to remember.

2600
02:16:01.985 --> 02:16:04.565
And, and, and, and, and, we'll, we'll see it later.

2601
02:16:05.765 --> 02:16:06.925
I mean, I'll be honest, I cheat.

2602
02:16:07.045 --> 02:16:09.885
I use the AI and then I modify it to work to make,

2603
02:16:09.885 --> 02:16:11.565
to make it work the way I really need it to work.

2604
02:16:11.585 --> 02:16:13.605
But I get them to use Do my start. Sorry.

2605
02:16:14.435 --> 02:16:16.885
Yeah. I mean, you can, you'll, if you've done it

2606
02:16:17.465 --> 02:16:20.285
rot enough test classes, it starts to not even be

2607
02:16:22.475 --> 02:16:26.185
stage my data, call my method, assert my result.

2608
02:16:26.185 --> 02:16:27.505
Mm-hmm. Like, it, it gets faster

2609
02:16:27.615 --> 02:16:29.065
even manually once you've Okay.

2610
02:16:29.185 --> 02:16:31.005
Got a good grasp on it. That's a good question.

2611
02:16:31.325 --> 02:16:33.005
I I, I just be careful with that.

2612
02:16:33.165 --> 02:16:35.165
I don't want to be responsible for

2613
02:16:36.175 --> 02:16:37.505
telling you I haven't touched it yet.

2614
02:16:37.505 --> 02:16:39.105
Get in there and clean it up. But,

2615
02:16:39.105 --> 02:16:42.655
Uh, it drives me nuts At some, I mean, I don't know

2616
02:16:42.655 --> 02:16:43.895
what level of agency you have,

2617
02:16:43.955 --> 02:16:45.775
but if you have the agency to get in there

2618
02:16:45.775 --> 02:16:46.775
and clean it up, get in there

2619
02:16:46.775 --> 02:16:49.615
and clean it up, just know the risk that you're accepting

2620
02:16:50.205 --> 02:16:54.315
when you go in there and clean it up.

2621
02:16:54.595 --> 02:16:56.555
'cause you might change the course assertions just

2622
02:16:56.615 --> 02:16:57.675
on accident, right?

2623
02:16:58.105 --> 02:16:59.195
Yeah. Okay.

2624
02:16:59.345 --> 02:17:04.235
I've I've done that in the last, uh, year, even once.

2625
02:17:04.415 --> 02:17:05.995
So it's, it's not impossible.

2626
02:17:05.995 --> 02:17:07.995
It's not like you become immune to these things.

2627
02:17:09.065 --> 02:17:10.675
It's part of, it's part of cleaning up.

2628
02:17:11.865 --> 02:17:14.635
Yeah. So, so we just did a, a new org implementation.

2629
02:17:14.635 --> 02:17:16.955
So now we're in the part of documenting the whole org

2630
02:17:16.955 --> 02:17:18.875
because we did it in such a hurry.

2631
02:17:19.415 --> 02:17:20.715
So now it's like everything's on pause

2632
02:17:20.735 --> 02:17:22.155
and org has to be documented and on.

2633
02:17:22.155 --> 02:17:24.155
Now I'm getting to the code coverage. It's like, okay.

2634
02:17:25.805 --> 02:17:29.015
Yeah. But okay. Just careful

2635
02:17:29.035 --> 02:17:32.335
You, it, like I I've said a couple times, uh, today,

2636
02:17:32.335 --> 02:17:34.775
like great power, great responsibility, uncle Ben principle.

2637
02:17:35.995 --> 02:17:37.535
All right, folks, I do have to get going.

2638
02:17:37.865 --> 02:17:38.895
Thank you for your questions.

2639
02:17:38.945 --> 02:17:40.255
Thank you all for your well wishes.

2640
02:17:40.615 --> 02:17:43.375
I will, uh, give a little report on it once

2641
02:17:43.515 --> 02:17:44.575
I'm there when I get back.

2642
02:17:45.035 --> 02:17:46.895
Yep. Enjoy your trip. Thank

2643
02:17:46.895 --> 02:17:47.895
You. Thank you. Take care everybody.

2644
02:17:47.895 --> 02:17:48.495
Bye.
